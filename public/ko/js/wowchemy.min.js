/*! Hugo Blox Builder v5.9.7 | https://hugoblox.com/ */
/*! Copyright 2016-present George Cushen (https://georgecushen.com/) */
/*! License: https://github.com/HugoBlox/hugo-blox-builder/blob/main/LICENSE.md */

;
(() => {
  // <stdin>
  (() => {
    var _extends = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    var isSupported = function isSupported2(node) {
      return node.tagName === "IMG";
    };
    var isNodeList = function isNodeList2(selector) {
      return NodeList.prototype.isPrototypeOf(selector);
    };
    var isNode = function isNode2(selector) {
      return selector && selector.nodeType === 1;
    };
    var isSvg = function isSvg2(image) {
      var source = image.currentSrc || image.src;
      return source.substr(-4).toLowerCase() === ".svg";
    };
    var getImagesFromSelector = function getImagesFromSelector2(selector) {
      try {
        if (Array.isArray(selector)) {
          return selector.filter(isSupported);
        }
        if (isNodeList(selector)) {
          return [].slice.call(selector).filter(isSupported);
        }
        if (isNode(selector)) {
          return [selector].filter(isSupported);
        }
        if (typeof selector === "string") {
          return [].slice.call(document.querySelectorAll(selector)).filter(isSupported);
        }
        return [];
      } catch (err) {
        throw new TypeError("The provided selector is invalid.\nExpects a CSS selector, a Node element, a NodeList or an array.\nSee: https://github.com/francoischalifour/medium-zoom");
      }
    };
    var createOverlay = function createOverlay2(background) {
      var overlay = document.createElement("div");
      overlay.classList.add("medium-zoom-overlay");
      overlay.style.background = background;
      return overlay;
    };
    var cloneTarget = function cloneTarget2(template) {
      var _template$getBounding = template.getBoundingClientRect(), top = _template$getBounding.top, left = _template$getBounding.left, width = _template$getBounding.width, height = _template$getBounding.height;
      var clone = template.cloneNode();
      var scrollTop = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;
      var scrollLeft = window.pageXOffset || document.documentElement.scrollLeft || document.body.scrollLeft || 0;
      clone.removeAttribute("id");
      clone.style.position = "absolute";
      clone.style.top = top + scrollTop + "px";
      clone.style.left = left + scrollLeft + "px";
      clone.style.width = width + "px";
      clone.style.height = height + "px";
      clone.style.transform = "";
      return clone;
    };
    var createCustomEvent = function createCustomEvent2(type, params) {
      var eventParams = _extends({
        bubbles: false,
        cancelable: false,
        detail: void 0
      }, params);
      if (typeof window.CustomEvent === "function") {
        return new CustomEvent(type, eventParams);
      }
      var customEvent = document.createEvent("CustomEvent");
      customEvent.initCustomEvent(type, eventParams.bubbles, eventParams.cancelable, eventParams.detail);
      return customEvent;
    };
    var mediumZoom = function mediumZoom2(selector) {
      var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var Promise2 = window.Promise || function Promise3(fn) {
        function noop() {
        }
        fn(noop, noop);
      };
      var _handleClick = function _handleClick2(event) {
        var target = event.target;
        if (target === overlay) {
          close();
          return;
        }
        if (images.indexOf(target) === -1) {
          return;
        }
        toggle({ target });
      };
      var _handleScroll = function _handleScroll2() {
        if (isAnimating || !active.original) {
          return;
        }
        var currentScroll = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;
        if (Math.abs(scrollTop - currentScroll) > zoomOptions.scrollOffset) {
          setTimeout(close, 150);
        }
      };
      var _handleKeyUp = function _handleKeyUp2(event) {
        var key = event.key || event.keyCode;
        if (key === "Escape" || key === "Esc" || key === 27) {
          close();
        }
      };
      var update = function update2() {
        var options2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        var newOptions = options2;
        if (options2.background) {
          overlay.style.background = options2.background;
        }
        if (options2.container && options2.container instanceof Object) {
          newOptions.container = _extends({}, zoomOptions.container, options2.container);
        }
        if (options2.template) {
          var template = isNode(options2.template) ? options2.template : document.querySelector(options2.template);
          newOptions.template = template;
        }
        zoomOptions = _extends({}, zoomOptions, newOptions);
        images.forEach(function(image) {
          image.dispatchEvent(createCustomEvent("medium-zoom:update", {
            detail: { zoom }
          }));
        });
        return zoom;
      };
      var clone = function clone2() {
        var options2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        return mediumZoom2(_extends({}, zoomOptions, options2));
      };
      var attach = function attach2() {
        for (var _len = arguments.length, selectors = Array(_len), _key = 0; _key < _len; _key++) {
          selectors[_key] = arguments[_key];
        }
        var newImages = selectors.reduce(function(imagesAccumulator, currentSelector) {
          return [].concat(imagesAccumulator, getImagesFromSelector(currentSelector));
        }, []);
        newImages.filter(function(newImage) {
          return images.indexOf(newImage) === -1;
        }).forEach(function(newImage) {
          images.push(newImage);
          newImage.classList.add("medium-zoom-image");
        });
        eventListeners.forEach(function(_ref) {
          var type = _ref.type, listener = _ref.listener, options2 = _ref.options;
          newImages.forEach(function(image) {
            image.addEventListener(type, listener, options2);
          });
        });
        return zoom;
      };
      var detach = function detach2() {
        for (var _len2 = arguments.length, selectors = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          selectors[_key2] = arguments[_key2];
        }
        if (active.zoomed) {
          close();
        }
        var imagesToDetach = selectors.length > 0 ? selectors.reduce(function(imagesAccumulator, currentSelector) {
          return [].concat(imagesAccumulator, getImagesFromSelector(currentSelector));
        }, []) : images;
        imagesToDetach.forEach(function(image) {
          image.classList.remove("medium-zoom-image");
          image.dispatchEvent(createCustomEvent("medium-zoom:detach", {
            detail: { zoom }
          }));
        });
        images = images.filter(function(image) {
          return imagesToDetach.indexOf(image) === -1;
        });
        return zoom;
      };
      var on = function on2(type, listener) {
        var options2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
        images.forEach(function(image) {
          image.addEventListener("medium-zoom:" + type, listener, options2);
        });
        eventListeners.push({ type: "medium-zoom:" + type, listener, options: options2 });
        return zoom;
      };
      var off = function off2(type, listener) {
        var options2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
        images.forEach(function(image) {
          image.removeEventListener("medium-zoom:" + type, listener, options2);
        });
        eventListeners = eventListeners.filter(function(eventListener) {
          return !(eventListener.type === "medium-zoom:" + type && eventListener.listener.toString() === listener.toString());
        });
        return zoom;
      };
      var open = function open2() {
        var _ref2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, target = _ref2.target;
        var _animate = function _animate2() {
          var container = {
            width: document.documentElement.clientWidth,
            height: document.documentElement.clientHeight,
            left: 0,
            top: 0,
            right: 0,
            bottom: 0
          };
          var viewportWidth = void 0;
          var viewportHeight = void 0;
          if (zoomOptions.container) {
            if (zoomOptions.container instanceof Object) {
              container = _extends({}, container, zoomOptions.container);
              viewportWidth = container.width - container.left - container.right - zoomOptions.margin * 2;
              viewportHeight = container.height - container.top - container.bottom - zoomOptions.margin * 2;
            } else {
              var zoomContainer = isNode(zoomOptions.container) ? zoomOptions.container : document.querySelector(zoomOptions.container);
              var _zoomContainer$getBou = zoomContainer.getBoundingClientRect(), _width = _zoomContainer$getBou.width, _height = _zoomContainer$getBou.height, _left = _zoomContainer$getBou.left, _top = _zoomContainer$getBou.top;
              container = _extends({}, container, {
                width: _width,
                height: _height,
                left: _left,
                top: _top
              });
            }
          }
          viewportWidth = viewportWidth || container.width - zoomOptions.margin * 2;
          viewportHeight = viewportHeight || container.height - zoomOptions.margin * 2;
          var zoomTarget = active.zoomedHd || active.original;
          var naturalWidth = isSvg(zoomTarget) ? viewportWidth : zoomTarget.naturalWidth || viewportWidth;
          var naturalHeight = isSvg(zoomTarget) ? viewportHeight : zoomTarget.naturalHeight || viewportHeight;
          var _zoomTarget$getBoundi = zoomTarget.getBoundingClientRect(), top = _zoomTarget$getBoundi.top, left = _zoomTarget$getBoundi.left, width = _zoomTarget$getBoundi.width, height = _zoomTarget$getBoundi.height;
          var scaleX = Math.min(Math.max(width, naturalWidth), viewportWidth) / width;
          var scaleY = Math.min(Math.max(height, naturalHeight), viewportHeight) / height;
          var scale = Math.min(scaleX, scaleY);
          var translateX = (-left + (viewportWidth - width) / 2 + zoomOptions.margin + container.left) / scale;
          var translateY = (-top + (viewportHeight - height) / 2 + zoomOptions.margin + container.top) / scale;
          var transform = "scale(" + scale + ") translate3d(" + translateX + "px, " + translateY + "px, 0)";
          active.zoomed.style.transform = transform;
          if (active.zoomedHd) {
            active.zoomedHd.style.transform = transform;
          }
        };
        return new Promise2(function(resolve) {
          if (target && images.indexOf(target) === -1) {
            resolve(zoom);
            return;
          }
          var _handleOpenEnd = function _handleOpenEnd2() {
            isAnimating = false;
            active.zoomed.removeEventListener("transitionend", _handleOpenEnd2);
            active.original.dispatchEvent(createCustomEvent("medium-zoom:opened", {
              detail: { zoom }
            }));
            resolve(zoom);
          };
          if (active.zoomed) {
            resolve(zoom);
            return;
          }
          if (target) {
            active.original = target;
          } else if (images.length > 0) {
            var _images = images;
            active.original = _images[0];
          } else {
            resolve(zoom);
            return;
          }
          active.original.dispatchEvent(createCustomEvent("medium-zoom:open", {
            detail: { zoom }
          }));
          scrollTop = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;
          isAnimating = true;
          active.zoomed = cloneTarget(active.original);
          document.body.appendChild(overlay);
          if (zoomOptions.template) {
            var template = isNode(zoomOptions.template) ? zoomOptions.template : document.querySelector(zoomOptions.template);
            active.template = document.createElement("div");
            active.template.appendChild(template.content.cloneNode(true));
            document.body.appendChild(active.template);
          }
          if (active.original.parentElement && active.original.parentElement.tagName === "PICTURE" && active.original.currentSrc) {
            active.zoomed.src = active.original.currentSrc;
          }
          document.body.appendChild(active.zoomed);
          window.requestAnimationFrame(function() {
            document.body.classList.add("medium-zoom--opened");
          });
          active.original.classList.add("medium-zoom-image--hidden");
          active.zoomed.classList.add("medium-zoom-image--opened");
          active.zoomed.addEventListener("click", close);
          active.zoomed.addEventListener("transitionend", _handleOpenEnd);
          if (active.original.getAttribute("data-zoom-src")) {
            active.zoomedHd = active.zoomed.cloneNode();
            active.zoomedHd.removeAttribute("srcset");
            active.zoomedHd.removeAttribute("sizes");
            active.zoomedHd.removeAttribute("loading");
            active.zoomedHd.src = active.zoomed.getAttribute("data-zoom-src");
            active.zoomedHd.onerror = function() {
              clearInterval(getZoomTargetSize);
              console.warn("Unable to reach the zoom image target " + active.zoomedHd.src);
              active.zoomedHd = null;
              _animate();
            };
            var getZoomTargetSize = setInterval(function() {
              if (active.zoomedHd.complete) {
                clearInterval(getZoomTargetSize);
                active.zoomedHd.classList.add("medium-zoom-image--opened");
                active.zoomedHd.addEventListener("click", close);
                document.body.appendChild(active.zoomedHd);
                _animate();
              }
            }, 10);
          } else if (active.original.hasAttribute("srcset")) {
            active.zoomedHd = active.zoomed.cloneNode();
            active.zoomedHd.removeAttribute("sizes");
            active.zoomedHd.removeAttribute("loading");
            var loadEventListener = active.zoomedHd.addEventListener("load", function() {
              active.zoomedHd.removeEventListener("load", loadEventListener);
              active.zoomedHd.classList.add("medium-zoom-image--opened");
              active.zoomedHd.addEventListener("click", close);
              document.body.appendChild(active.zoomedHd);
              _animate();
            });
          } else {
            _animate();
          }
        });
      };
      var close = function close2() {
        return new Promise2(function(resolve) {
          if (isAnimating || !active.original) {
            resolve(zoom);
            return;
          }
          var _handleCloseEnd = function _handleCloseEnd2() {
            active.original.classList.remove("medium-zoom-image--hidden");
            document.body.removeChild(active.zoomed);
            if (active.zoomedHd) {
              document.body.removeChild(active.zoomedHd);
            }
            document.body.removeChild(overlay);
            active.zoomed.classList.remove("medium-zoom-image--opened");
            if (active.template) {
              document.body.removeChild(active.template);
            }
            isAnimating = false;
            active.zoomed.removeEventListener("transitionend", _handleCloseEnd2);
            active.original.dispatchEvent(createCustomEvent("medium-zoom:closed", {
              detail: { zoom }
            }));
            active.original = null;
            active.zoomed = null;
            active.zoomedHd = null;
            active.template = null;
            resolve(zoom);
          };
          isAnimating = true;
          document.body.classList.remove("medium-zoom--opened");
          active.zoomed.style.transform = "";
          if (active.zoomedHd) {
            active.zoomedHd.style.transform = "";
          }
          if (active.template) {
            active.template.style.transition = "opacity 150ms";
            active.template.style.opacity = 0;
          }
          active.original.dispatchEvent(createCustomEvent("medium-zoom:close", {
            detail: { zoom }
          }));
          active.zoomed.addEventListener("transitionend", _handleCloseEnd);
        });
      };
      var toggle = function toggle2() {
        var _ref3 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, target = _ref3.target;
        if (active.original) {
          return close();
        }
        return open({ target });
      };
      var getOptions = function getOptions2() {
        return zoomOptions;
      };
      var getImages = function getImages2() {
        return images;
      };
      var getZoomedImage = function getZoomedImage2() {
        return active.original;
      };
      var images = [];
      var eventListeners = [];
      var isAnimating = false;
      var scrollTop = 0;
      var zoomOptions = options;
      var active = {
        original: null,
        zoomed: null,
        zoomedHd: null,
        template: null
        // If the selector is omitted, it's replaced by the options
      };
      if (Object.prototype.toString.call(selector) === "[object Object]") {
        zoomOptions = selector;
      } else if (selector || typeof selector === "string") {
        attach(selector);
      }
      zoomOptions = _extends({
        margin: 0,
        background: "#fff",
        scrollOffset: 40,
        container: null,
        template: null
      }, zoomOptions);
      var overlay = createOverlay(zoomOptions.background);
      document.addEventListener("click", _handleClick);
      document.addEventListener("keyup", _handleKeyUp);
      document.addEventListener("scroll", _handleScroll);
      window.addEventListener("resize", close);
      var zoom = {
        open,
        close,
        toggle,
        update,
        clone,
        attach,
        detach,
        on,
        off,
        getOptions,
        getImages,
        getZoomedImage
      };
      return zoom;
    };
    function styleInject(css2, ref) {
      if (ref === void 0) ref = {};
      var insertAt = ref.insertAt;
      if (!css2 || typeof document === "undefined") {
        return;
      }
      var head = document.head || document.getElementsByTagName("head")[0];
      var style = document.createElement("style");
      style.type = "text/css";
      if (insertAt === "top") {
        if (head.firstChild) {
          head.insertBefore(style, head.firstChild);
        } else {
          head.appendChild(style);
        }
      } else {
        head.appendChild(style);
      }
      if (style.styleSheet) {
        style.styleSheet.cssText = css2;
      } else {
        style.appendChild(document.createTextNode(css2));
      }
    }
    var css = ".medium-zoom-overlay{position:fixed;top:0;right:0;bottom:0;left:0;opacity:0;transition:opacity .3s;will-change:opacity}.medium-zoom--opened .medium-zoom-overlay{cursor:pointer;cursor:zoom-out;opacity:1}.medium-zoom-image{cursor:pointer;cursor:zoom-in;transition:transform .3s cubic-bezier(.2,0,.2,1)!important}.medium-zoom-image--hidden{visibility:hidden}.medium-zoom-image--opened{position:relative;cursor:pointer;cursor:zoom-out;will-change:transform}";
    styleInject(css);
    var medium_zoom_esm_default = mediumZoom;
    var hugoEnvironment = "development";
    var i18n = { copied: "Copied", copy: "\uBCF5\uC0AC" };
    var searchEnabled = false;
    function scrollParentToChild(parent, child) {
      const parentRect = parent.getBoundingClientRect();
      const parentViewableArea = {
        height: parent.clientHeight,
        width: parent.clientWidth
      };
      const childRect = child.getBoundingClientRect();
      const isChildInView = childRect.top >= parentRect.top && childRect.bottom <= parentRect.top + parentViewableArea.height;
      if (!isChildInView) {
        parent.scrollTop = childRect.top + parent.scrollTop - parentRect.top;
      }
    }
    function getNavBarHeight() {
      let navbar = document.getElementById("navbar-main");
      let navbarHeight = navbar ? navbar.getBoundingClientRect().height : 0;
      console.debug("Navbar height: " + navbarHeight);
      return navbarHeight;
    }
    function scrollToAnchor(target, duration = 0) {
      target = typeof target === "undefined" || typeof target === "object" ? decodeURIComponent(window.location.hash) : target;
      if ($(target).length) {
        target = "#" + $.escapeSelector(target.substring(1));
        let elementOffset = Math.ceil($(target).offset().top - getNavBarHeight());
        document.querySelector("body").classList.add("scrolling");
        $("html, body").animate(
          {
            scrollTop: elementOffset
          },
          duration,
          function() {
            document.querySelector("body").classList.remove("scrolling");
          }
        );
      } else {
        console.debug("Cannot scroll to target `#" + target + "`. ID not found!");
      }
    }
    function fixScrollspy() {
      let $body = $("body");
      let data = $body.data("bs.scrollspy");
      if (data) {
        data._config.offset = getNavBarHeight();
        $body.data("bs.scrollspy", data);
        $body.scrollspy("refresh");
      }
    }
    $("#navbar-main li.nav-item a.nav-link, .js-scroll").on("click", function(event) {
      let hash = this.hash;
      if (this.pathname === window.location.pathname && hash && $(hash).length && $(".js-widget-page").length > 0) {
        event.preventDefault();
        let elementOffset = Math.ceil($(hash).offset().top - getNavBarHeight());
        $("html, body").animate(
          {
            scrollTop: elementOffset
          },
          800
        );
      }
    });
    $(document).on("click", ".navbar-collapse.show", function(e) {
      let targetElement = $(e.target).is("a") ? $(e.target) : $(e.target).parent();
      if (targetElement.is("a") && targetElement.attr("class") != "dropdown-toggle") {
        $(this).collapse("hide");
      }
    });
    $("body").on("mouseenter mouseleave", ".dropdown", function(e) {
      var dropdown = $(e.target).closest(".dropdown");
      var menu = $(".dropdown-menu", dropdown);
      dropdown.addClass("show");
      menu.addClass("show");
      setTimeout(function() {
        dropdown[dropdown.is(":hover") ? "addClass" : "removeClass"]("show");
        menu[dropdown.is(":hover") ? "addClass" : "removeClass"]("show");
      }, 300);
    });
    var resizeTimer;
    $(window).resize(function() {
      clearTimeout(resizeTimer);
      resizeTimer = setTimeout(fixScrollspy, 200);
    });
    window.addEventListener("hashchange", scrollToAnchor);
    function printLatestRelease(selector, repo) {
      if (hugoEnvironment === "production") {
        $.getJSON("https://api.github.com/repos/" + repo + "/tags").done(function(json) {
          let release = json[0];
          $(selector).append(" " + release.name);
        }).fail(function(jqxhr, textStatus, error) {
          let err = textStatus + ", " + error;
          console.log("Request Failed: " + err);
        });
      }
    }
    function fadeIn(element, duration = 600) {
      element.style.display = "";
      element.style.opacity = "0";
      let last = +/* @__PURE__ */ new Date();
      let tick = function() {
        element.style.opacity = (+element.style.opacity + (/* @__PURE__ */ new Date() - last) / duration).toString();
        last = +/* @__PURE__ */ new Date();
        if (+element.style.opacity < 1) {
          window.requestAnimationFrame && requestAnimationFrame(tick) || setTimeout(tick, 16);
        }
      };
      tick();
    }
    var body = document.body;
    function getThemeMode() {
      return parseInt(localStorage.getItem("wcTheme") || 2);
    }
    function canChangeTheme() {
      return Boolean(window.wc.darkLightEnabled);
    }
    function initThemeVariation() {
      if (!canChangeTheme()) {
        console.debug("User theming disabled.");
        return {
          isDarkTheme: window.wc.isSiteThemeDark,
          themeMode: window.wc.isSiteThemeDark ? 1 : 0
        };
      }
      console.debug("User theming enabled.");
      let isDarkTheme;
      let currentThemeMode = getThemeMode();
      console.debug(`User's theme variation: ${currentThemeMode}`);
      switch (currentThemeMode) {
        case 0:
          isDarkTheme = false;
          break;
        case 1:
          isDarkTheme = true;
          break;
        default:
          if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
            isDarkTheme = true;
          } else if (window.matchMedia("(prefers-color-scheme: light)").matches) {
            isDarkTheme = false;
          } else {
            isDarkTheme = window.wc.isSiteThemeDark;
          }
          break;
      }
      if (isDarkTheme && !body.classList.contains("dark")) {
        console.debug("Applying Hugo Blox Builder dark theme");
        document.body.classList.add("dark");
      } else if (!isDarkTheme && body.classList.contains("dark")) {
        console.debug("Applying Hugo Blox Builder light theme");
        document.body.classList.remove("dark");
      }
      return {
        isDarkTheme,
        themeMode: currentThemeMode
      };
    }
    function changeThemeModeClick(newMode) {
      if (!canChangeTheme()) {
        console.debug("Cannot change theme - user theming disabled.");
        return;
      }
      let isDarkTheme;
      switch (newMode) {
        case 0:
          localStorage.setItem("wcTheme", "0");
          isDarkTheme = false;
          console.debug("User changed theme variation to Light.");
          break;
        case 1:
          localStorage.setItem("wcTheme", "1");
          isDarkTheme = true;
          console.debug("User changed theme variation to Dark.");
          break;
        default:
          localStorage.setItem("wcTheme", "2");
          if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
            isDarkTheme = true;
          } else if (window.matchMedia("(prefers-color-scheme: light)").matches) {
            isDarkTheme = false;
          } else {
            isDarkTheme = window.wc.isSiteThemeDark;
          }
          console.debug("User changed theme variation to Auto.");
          break;
      }
      renderThemeVariation(isDarkTheme, newMode);
    }
    function showActiveTheme(mode) {
      let linkLight2 = document.querySelector(".js-set-theme-light");
      let linkDark2 = document.querySelector(".js-set-theme-dark");
      let linkAuto2 = document.querySelector(".js-set-theme-auto");
      if (linkLight2 === null) {
        return;
      }
      switch (mode) {
        case 0:
          linkLight2.classList.add("dropdown-item-active");
          linkDark2.classList.remove("dropdown-item-active");
          linkAuto2.classList.remove("dropdown-item-active");
          break;
        case 1:
          linkLight2.classList.remove("dropdown-item-active");
          linkDark2.classList.add("dropdown-item-active");
          linkAuto2.classList.remove("dropdown-item-active");
          break;
        default:
          linkLight2.classList.remove("dropdown-item-active");
          linkDark2.classList.remove("dropdown-item-active");
          linkAuto2.classList.add("dropdown-item-active");
          break;
      }
    }
    function renderThemeVariation(isDarkTheme, themeMode = 2, init = false) {
      const codeHlLight = document.querySelector("link[title=hl-light]");
      const codeHlDark = document.querySelector("link[title=hl-dark]");
      const codeHlEnabled = codeHlLight !== null || codeHlDark !== null;
      const diagramEnabled = document.querySelector("script[title=mermaid]") !== null;
      showActiveTheme(themeMode);
      const themeChangeEvent = new CustomEvent("wcThemeChange", { detail: { isDarkTheme: () => isDarkTheme } });
      document.dispatchEvent(themeChangeEvent);
      if (!init) {
        if (isDarkTheme === false && !body.classList.contains("dark") || isDarkTheme === true && body.classList.contains("dark")) {
          return;
        }
      }
      if (isDarkTheme === false) {
        if (!init) {
          Object.assign(document.body.style, { opacity: 0, visibility: "visible" });
          fadeIn(document.body, 600);
        }
        body.classList.remove("dark");
        if (codeHlEnabled) {
          console.debug("Setting HLJS theme to light");
          if (codeHlLight) {
            codeHlLight.disabled = false;
          }
          if (codeHlDark) {
            codeHlDark.disabled = true;
          }
        }
        if (diagramEnabled) {
          console.debug("Initializing Mermaid with light theme");
          if (init) {
            window.mermaid.initialize({ startOnLoad: true, theme: "default", securityLevel: "loose" });
          } else {
            location.reload();
          }
        }
      } else if (isDarkTheme === true) {
        if (!init) {
          Object.assign(document.body.style, { opacity: 0, visibility: "visible" });
          fadeIn(document.body, 600);
        }
        body.classList.add("dark");
        if (codeHlEnabled) {
          console.debug("Setting HLJS theme to dark");
          if (codeHlLight) {
            codeHlLight.disabled = true;
          }
          if (codeHlDark) {
            codeHlDark.disabled = false;
          }
        }
        if (diagramEnabled) {
          console.debug("Initializing Mermaid with dark theme");
          if (init) {
            window.mermaid.initialize({ startOnLoad: true, theme: "dark", securityLevel: "loose" });
          } else {
            location.reload();
          }
        }
      }
    }
    function onMediaQueryListEvent(event) {
      if (!canChangeTheme()) {
        return;
      }
      const darkModeOn = event.matches;
      console.debug(`OS dark mode preference changed to ${darkModeOn ? "\u{1F312} on" : "\u2600\uFE0F off"}.`);
      let currentThemeVariation = getThemeMode();
      let isDarkTheme;
      if (currentThemeVariation === 2) {
        if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
          isDarkTheme = true;
        } else if (window.matchMedia("(prefers-color-scheme: light)").matches) {
          isDarkTheme = false;
        } else {
          isDarkTheme = window.wc.isSiteThemeDark;
        }
        renderThemeVariation(isDarkTheme, currentThemeVariation);
      }
    }
    console.debug(`Environment: ${hugoEnvironment}`);
    function removeQueryParamsFromUrl() {
      if (window.history.replaceState) {
        let urlWithoutSearchParams = window.location.protocol + "//" + window.location.host + window.location.pathname + window.location.hash;
        window.history.replaceState({ path: urlWithoutSearchParams }, "", urlWithoutSearchParams);
      }
    }
    function toggleSearchDialog() {
      const body2 = document.querySelector("body");
      if (body2.classList.contains("searching")) {
        document.getElementById("search-query").blur();
        body2.classList.remove("searching", "compensate-for-scrollbar");
        removeQueryParamsFromUrl();
        $("#fancybox-style-noscroll").remove();
      } else {
        if (!$("#fancybox-style-noscroll").length && document.body.scrollHeight > window.innerHeight) {
          $("head").append(
            '<style id="fancybox-style-noscroll">.compensate-for-scrollbar{margin-right:' + (window.innerWidth - document.documentElement.clientWidth) + "px;}</style>"
          );
          body2.classList.add("compensate-for-scrollbar");
        }
        body2.classList.add("searching");
        $(".search-results").css({ opacity: 0, visibility: "visible" }).animate({ opacity: 1 }, 200);
        let algoliaSearchBox = document.querySelector(".ais-SearchBox-input");
        if (algoliaSearchBox) {
          algoliaSearchBox.focus();
        } else {
          document.getElementById("search-query").focus();
        }
      }
    }
    function fixHugoOutput() {
      if (document.querySelector("#TableOfContents")) {
        document.querySelector("#TableOfContents").classList.add("nav", "flex-column");
      }
      document.querySelectorAll("#TableOfContents li").forEach((item) => {
        item.classList.add("nav-item");
      });
      document.querySelectorAll("#TableOfContents li a").forEach((link) => {
        link.classList.add("nav-link");
      });
      document.querySelectorAll("input[type='checkbox'][disabled]").forEach((checkbox) => {
        checkbox.closest("ul").classList.add("task-list");
      });
      document.querySelectorAll("table").forEach((table) => {
        table.classList.add("table");
      });
    }
    function getSiblings(elem) {
      return Array.prototype.filter.call(elem.parentNode.children, function(sibling) {
        return sibling !== elem;
      });
    }
    document.addEventListener("DOMContentLoaded", function() {
      fixHugoOutput();
      let { isDarkTheme, themeMode } = initThemeVariation();
      renderThemeVariation(isDarkTheme, themeMode, true);
      let child = document.querySelector(".docs-links .active");
      let parent = document.querySelector(".docs-links");
      if (child && parent) {
        scrollParentToChild(parent, child);
      }
      let githubReleaseSelector = ".js-github-release";
      if ($(githubReleaseSelector).length > 0) {
        printLatestRelease(githubReleaseSelector, $(githubReleaseSelector).data("repo"));
      }
    });
    window.addEventListener("load", function() {
      fixScrollspy();
      let isotopeInstances = document.querySelectorAll(".projects-container");
      let isotopeInstancesCount = isotopeInstances.length;
      if (window.location.hash && isotopeInstancesCount === 0) {
        scrollToAnchor(decodeURIComponent(window.location.hash), 0);
      }
      let child = document.querySelector(".docs-toc .nav-link.active");
      let parent = document.querySelector(".docs-toc");
      if (child && parent) {
        scrollParentToChild(parent, child);
      }
      let zoomOptions = {};
      if (document.body.classList.contains("dark")) {
        zoomOptions.background = "rgba(0,0,0,0.9)";
      } else {
        zoomOptions.background = "rgba(255,255,255,0.9)";
      }
      medium_zoom_esm_default("[data-zoomable]", zoomOptions);
      let isotopeCounter = 0;
      isotopeInstances.forEach(function(isotopeInstance, index) {
        console.debug(`Loading Isotope instance ${index}`);
        let iso;
        let isoSection = isotopeInstance.closest("section");
        let layout = "";
        if (isoSection.querySelector(".isotope").classList.contains("js-layout-row")) {
          layout = "fitRows";
        } else {
          layout = "masonry";
        }
        let defaultFilter = isoSection.querySelector(".default-project-filter");
        let filterText = "*";
        if (defaultFilter !== null) {
          filterText = defaultFilter.textContent;
        }
        console.debug(`Default Isotope filter: ${filterText}`);
        imagesLoaded(isotopeInstance, function() {
          iso = new Isotope(isotopeInstance, {
            itemSelector: ".isotope-item",
            layoutMode: layout,
            masonry: {
              gutter: 20
            },
            filter: filterText
          });
          let isoFilterButtons = isoSection.querySelectorAll(".project-filters a");
          isoFilterButtons.forEach(
            (button) => button.addEventListener("click", (e) => {
              e.preventDefault();
              let selector = button.getAttribute("data-filter");
              console.debug(`Updating Isotope filter to ${selector}`);
              iso.arrange({ filter: selector });
              button.classList.remove("active");
              button.classList.add("active");
              let buttonSiblings = getSiblings(button);
              buttonSiblings.forEach((buttonSibling) => {
                buttonSibling.classList.remove("active");
                buttonSibling.classList.remove("all");
              });
            })
          );
          incrementIsotopeCounter();
        });
      });
      function incrementIsotopeCounter() {
        isotopeCounter++;
        if (isotopeCounter === isotopeInstancesCount) {
          console.debug(`All Portfolio Isotope instances loaded.`);
          if (window.location.hash) {
            scrollToAnchor(decodeURIComponent(window.location.hash), 0);
          }
        }
      }
      document.addEventListener("keyup", (event) => {
        if (event.code === "Escape") {
          const body2 = document.body;
          if (body2.classList.contains("searching")) {
            toggleSearchDialog();
          }
        }
        if (event.key === "/") {
          let focusedElement = document.hasFocus() && document.activeElement !== document.body && document.activeElement !== document.documentElement && document.activeElement || null;
          let isInputFocused = focusedElement instanceof HTMLInputElement || focusedElement instanceof HTMLTextAreaElement;
          if (searchEnabled && !isInputFocused) {
            event.preventDefault();
            toggleSearchDialog();
          }
        }
      });
      if (searchEnabled) {
        document.querySelectorAll(".js-search").forEach((element) => {
          element.addEventListener("click", (e) => {
            e.preventDefault();
            toggleSearchDialog();
          });
        });
      }
      $('[data-toggle="tooltip"]').tooltip();
    });
    var linkLight = document.querySelector(".js-set-theme-light");
    var linkDark = document.querySelector(".js-set-theme-dark");
    var linkAuto = document.querySelector(".js-set-theme-auto");
    if (linkLight && linkDark && linkAuto) {
      linkLight.addEventListener("click", (event) => {
        event.preventDefault();
        changeThemeModeClick(0);
      });
      linkDark.addEventListener("click", (event) => {
        event.preventDefault();
        changeThemeModeClick(1);
      });
      linkAuto.addEventListener("click", (event) => {
        event.preventDefault();
        changeThemeModeClick(2);
      });
    }
    var darkModeMediaQuery = window.matchMedia("(prefers-color-scheme: dark)");
    darkModeMediaQuery.addEventListener("change", (event) => {
      onMediaQueryListEvent(event);
    });
    document.querySelectorAll("pre > code").forEach((codeblock) => {
      const container = codeblock.parentNode.parentNode;
      const copyBtn = document.createElement("button");
      let classesToAdd = ["btn", "btn-primary", "btn-copy-code"];
      copyBtn.classList.add(...classesToAdd);
      copyBtn.innerHTML = i18n["copy"];
      function copiedNotification() {
        copyBtn.innerHTML = i18n["copied"];
        setTimeout(() => {
          copyBtn.innerHTML = i18n["copy"];
        }, 2e3);
      }
      copyBtn.addEventListener("click", () => {
        console.debug("Code block copy click. Is secure context for Clipboard API? " + window.isSecureContext);
        if ("clipboard" in navigator) {
          navigator.clipboard.writeText(codeblock.textContent);
          copiedNotification();
          return;
        } else {
          console.debug("Falling back to legacy clipboard copy");
          const range = document.createRange();
          range.selectNodeContents(codeblock);
          const selection = window.getSelection();
          selection.removeAllRanges();
          selection.addRange(range);
          try {
            document.execCommand("copy");
            copiedNotification();
          } catch (e) {
            console.error(e);
          }
          selection.removeRange(range);
        }
      });
      if (container.classList.contains("highlight")) {
        container.appendChild(copyBtn);
      } else if (codeblock.parentNode.parentNode.parentNode.parentNode.parentNode.nodeName == "TABLE") {
        codeblock.parentNode.parentNode.parentNode.parentNode.parentNode.appendChild(copyBtn);
      } else {
        codeblock.parentNode.appendChild(copyBtn);
      }
    });
  })();
})();
/*! medium-zoom 1.0.8 | MIT License | https://github.com/francoischalifour/medium-zoom */
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiPHN0ZGluPiJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiKCgpID0+IHtcbiAgLy8gbnMtaHVnbzpDOlxcVXNlcnNcXHFhendzXFxBcHBEYXRhXFxMb2NhbFxcaHVnb19jYWNoZVxcbW9kdWxlc1xcZmlsZWNhY2hlXFxtb2R1bGVzXFxwa2dcXG1vZFxcZ2l0aHViLmNvbVxcIWh1Z28hYmxveFxcaHVnby1ibG94LWJ1aWxkZXJcXG1vZHVsZXNcXGJsb3gtYm9vdHN0cmFwXFx2NUB2NS45LjdcXGFzc2V0c1xcanNcXF92ZW5kb3JcXG1lZGl1bS16b29tLmVzbS5qc1xuICB2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcbiAgdmFyIGlzU3VwcG9ydGVkID0gZnVuY3Rpb24gaXNTdXBwb3J0ZWQyKG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZS50YWdOYW1lID09PSBcIklNR1wiO1xuICB9O1xuICB2YXIgaXNOb2RlTGlzdCA9IGZ1bmN0aW9uIGlzTm9kZUxpc3QyKHNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIE5vZGVMaXN0LnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKHNlbGVjdG9yKTtcbiAgfTtcbiAgdmFyIGlzTm9kZSA9IGZ1bmN0aW9uIGlzTm9kZTIoc2VsZWN0b3IpIHtcbiAgICByZXR1cm4gc2VsZWN0b3IgJiYgc2VsZWN0b3Iubm9kZVR5cGUgPT09IDE7XG4gIH07XG4gIHZhciBpc1N2ZyA9IGZ1bmN0aW9uIGlzU3ZnMihpbWFnZSkge1xuICAgIHZhciBzb3VyY2UgPSBpbWFnZS5jdXJyZW50U3JjIHx8IGltYWdlLnNyYztcbiAgICByZXR1cm4gc291cmNlLnN1YnN0cigtNCkudG9Mb3dlckNhc2UoKSA9PT0gXCIuc3ZnXCI7XG4gIH07XG4gIHZhciBnZXRJbWFnZXNGcm9tU2VsZWN0b3IgPSBmdW5jdGlvbiBnZXRJbWFnZXNGcm9tU2VsZWN0b3IyKHNlbGVjdG9yKSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHNlbGVjdG9yKSkge1xuICAgICAgICByZXR1cm4gc2VsZWN0b3IuZmlsdGVyKGlzU3VwcG9ydGVkKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc05vZGVMaXN0KHNlbGVjdG9yKSkge1xuICAgICAgICByZXR1cm4gW10uc2xpY2UuY2FsbChzZWxlY3RvcikuZmlsdGVyKGlzU3VwcG9ydGVkKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc05vZGUoc2VsZWN0b3IpKSB7XG4gICAgICAgIHJldHVybiBbc2VsZWN0b3JdLmZpbHRlcihpc1N1cHBvcnRlZCk7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHJldHVybiBbXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpKS5maWx0ZXIoaXNTdXBwb3J0ZWQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFtdO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlRoZSBwcm92aWRlZCBzZWxlY3RvciBpcyBpbnZhbGlkLlxcbkV4cGVjdHMgYSBDU1Mgc2VsZWN0b3IsIGEgTm9kZSBlbGVtZW50LCBhIE5vZGVMaXN0IG9yIGFuIGFycmF5LlxcblNlZTogaHR0cHM6Ly9naXRodWIuY29tL2ZyYW5jb2lzY2hhbGlmb3VyL21lZGl1bS16b29tXCIpO1xuICAgIH1cbiAgfTtcbiAgdmFyIGNyZWF0ZU92ZXJsYXkgPSBmdW5jdGlvbiBjcmVhdGVPdmVybGF5MihiYWNrZ3JvdW5kKSB7XG4gICAgdmFyIG92ZXJsYXkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIG92ZXJsYXkuY2xhc3NMaXN0LmFkZChcIm1lZGl1bS16b29tLW92ZXJsYXlcIik7XG4gICAgb3ZlcmxheS5zdHlsZS5iYWNrZ3JvdW5kID0gYmFja2dyb3VuZDtcbiAgICByZXR1cm4gb3ZlcmxheTtcbiAgfTtcbiAgdmFyIGNsb25lVGFyZ2V0ID0gZnVuY3Rpb24gY2xvbmVUYXJnZXQyKHRlbXBsYXRlKSB7XG4gICAgdmFyIF90ZW1wbGF0ZSRnZXRCb3VuZGluZyA9IHRlbXBsYXRlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLCB0b3AgPSBfdGVtcGxhdGUkZ2V0Qm91bmRpbmcudG9wLCBsZWZ0ID0gX3RlbXBsYXRlJGdldEJvdW5kaW5nLmxlZnQsIHdpZHRoID0gX3RlbXBsYXRlJGdldEJvdW5kaW5nLndpZHRoLCBoZWlnaHQgPSBfdGVtcGxhdGUkZ2V0Qm91bmRpbmcuaGVpZ2h0O1xuICAgIHZhciBjbG9uZSA9IHRlbXBsYXRlLmNsb25lTm9kZSgpO1xuICAgIHZhciBzY3JvbGxUb3AgPSB3aW5kb3cucGFnZVlPZmZzZXQgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCB8fCBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcCB8fCAwO1xuICAgIHZhciBzY3JvbGxMZWZ0ID0gd2luZG93LnBhZ2VYT2Zmc2V0IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0IHx8IGRvY3VtZW50LmJvZHkuc2Nyb2xsTGVmdCB8fCAwO1xuICAgIGNsb25lLnJlbW92ZUF0dHJpYnV0ZShcImlkXCIpO1xuICAgIGNsb25lLnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuICAgIGNsb25lLnN0eWxlLnRvcCA9IHRvcCArIHNjcm9sbFRvcCArIFwicHhcIjtcbiAgICBjbG9uZS5zdHlsZS5sZWZ0ID0gbGVmdCArIHNjcm9sbExlZnQgKyBcInB4XCI7XG4gICAgY2xvbmUuc3R5bGUud2lkdGggPSB3aWR0aCArIFwicHhcIjtcbiAgICBjbG9uZS5zdHlsZS5oZWlnaHQgPSBoZWlnaHQgKyBcInB4XCI7XG4gICAgY2xvbmUuc3R5bGUudHJhbnNmb3JtID0gXCJcIjtcbiAgICByZXR1cm4gY2xvbmU7XG4gIH07XG4gIHZhciBjcmVhdGVDdXN0b21FdmVudCA9IGZ1bmN0aW9uIGNyZWF0ZUN1c3RvbUV2ZW50Mih0eXBlLCBwYXJhbXMpIHtcbiAgICB2YXIgZXZlbnRQYXJhbXMgPSBfZXh0ZW5kcyh7XG4gICAgICBidWJibGVzOiBmYWxzZSxcbiAgICAgIGNhbmNlbGFibGU6IGZhbHNlLFxuICAgICAgZGV0YWlsOiB2b2lkIDBcbiAgICB9LCBwYXJhbXMpO1xuICAgIGlmICh0eXBlb2Ygd2luZG93LkN1c3RvbUV2ZW50ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHJldHVybiBuZXcgQ3VzdG9tRXZlbnQodHlwZSwgZXZlbnRQYXJhbXMpO1xuICAgIH1cbiAgICB2YXIgY3VzdG9tRXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudChcIkN1c3RvbUV2ZW50XCIpO1xuICAgIGN1c3RvbUV2ZW50LmluaXRDdXN0b21FdmVudCh0eXBlLCBldmVudFBhcmFtcy5idWJibGVzLCBldmVudFBhcmFtcy5jYW5jZWxhYmxlLCBldmVudFBhcmFtcy5kZXRhaWwpO1xuICAgIHJldHVybiBjdXN0b21FdmVudDtcbiAgfTtcbiAgdmFyIG1lZGl1bVpvb20gPSBmdW5jdGlvbiBtZWRpdW1ab29tMihzZWxlY3Rvcikge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB2b2lkIDAgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICB2YXIgUHJvbWlzZTIgPSB3aW5kb3cuUHJvbWlzZSB8fCBmdW5jdGlvbiBQcm9taXNlMyhmbikge1xuICAgICAgZnVuY3Rpb24gbm9vcCgpIHtcbiAgICAgIH1cbiAgICAgIGZuKG5vb3AsIG5vb3ApO1xuICAgIH07XG4gICAgdmFyIF9oYW5kbGVDbGljayA9IGZ1bmN0aW9uIF9oYW5kbGVDbGljazIoZXZlbnQpIHtcbiAgICAgIHZhciB0YXJnZXQgPSBldmVudC50YXJnZXQ7XG4gICAgICBpZiAodGFyZ2V0ID09PSBvdmVybGF5KSB7XG4gICAgICAgIGNsb3NlKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChpbWFnZXMuaW5kZXhPZih0YXJnZXQpID09PSAtMSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0b2dnbGUoeyB0YXJnZXQgfSk7XG4gICAgfTtcbiAgICB2YXIgX2hhbmRsZVNjcm9sbCA9IGZ1bmN0aW9uIF9oYW5kbGVTY3JvbGwyKCkge1xuICAgICAgaWYgKGlzQW5pbWF0aW5nIHx8ICFhY3RpdmUub3JpZ2luYWwpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIGN1cnJlbnRTY3JvbGwgPSB3aW5kb3cucGFnZVlPZmZzZXQgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCB8fCBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcCB8fCAwO1xuICAgICAgaWYgKE1hdGguYWJzKHNjcm9sbFRvcCAtIGN1cnJlbnRTY3JvbGwpID4gem9vbU9wdGlvbnMuc2Nyb2xsT2Zmc2V0KSB7XG4gICAgICAgIHNldFRpbWVvdXQoY2xvc2UsIDE1MCk7XG4gICAgICB9XG4gICAgfTtcbiAgICB2YXIgX2hhbmRsZUtleVVwID0gZnVuY3Rpb24gX2hhbmRsZUtleVVwMihldmVudCkge1xuICAgICAgdmFyIGtleSA9IGV2ZW50LmtleSB8fCBldmVudC5rZXlDb2RlO1xuICAgICAgaWYgKGtleSA9PT0gXCJFc2NhcGVcIiB8fCBrZXkgPT09IFwiRXNjXCIgfHwga2V5ID09PSAyNykge1xuICAgICAgICBjbG9zZSgpO1xuICAgICAgfVxuICAgIH07XG4gICAgdmFyIHVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZTIoKSB7XG4gICAgICB2YXIgb3B0aW9uczIgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHZvaWQgMCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgICAgdmFyIG5ld09wdGlvbnMgPSBvcHRpb25zMjtcbiAgICAgIGlmIChvcHRpb25zMi5iYWNrZ3JvdW5kKSB7XG4gICAgICAgIG92ZXJsYXkuc3R5bGUuYmFja2dyb3VuZCA9IG9wdGlvbnMyLmJhY2tncm91bmQ7XG4gICAgICB9XG4gICAgICBpZiAob3B0aW9uczIuY29udGFpbmVyICYmIG9wdGlvbnMyLmNvbnRhaW5lciBpbnN0YW5jZW9mIE9iamVjdCkge1xuICAgICAgICBuZXdPcHRpb25zLmNvbnRhaW5lciA9IF9leHRlbmRzKHt9LCB6b29tT3B0aW9ucy5jb250YWluZXIsIG9wdGlvbnMyLmNvbnRhaW5lcik7XG4gICAgICB9XG4gICAgICBpZiAob3B0aW9uczIudGVtcGxhdGUpIHtcbiAgICAgICAgdmFyIHRlbXBsYXRlID0gaXNOb2RlKG9wdGlvbnMyLnRlbXBsYXRlKSA/IG9wdGlvbnMyLnRlbXBsYXRlIDogZG9jdW1lbnQucXVlcnlTZWxlY3RvcihvcHRpb25zMi50ZW1wbGF0ZSk7XG4gICAgICAgIG5ld09wdGlvbnMudGVtcGxhdGUgPSB0ZW1wbGF0ZTtcbiAgICAgIH1cbiAgICAgIHpvb21PcHRpb25zID0gX2V4dGVuZHMoe30sIHpvb21PcHRpb25zLCBuZXdPcHRpb25zKTtcbiAgICAgIGltYWdlcy5mb3JFYWNoKGZ1bmN0aW9uKGltYWdlKSB7XG4gICAgICAgIGltYWdlLmRpc3BhdGNoRXZlbnQoY3JlYXRlQ3VzdG9tRXZlbnQoXCJtZWRpdW0tem9vbTp1cGRhdGVcIiwge1xuICAgICAgICAgIGRldGFpbDogeyB6b29tIH1cbiAgICAgICAgfSkpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gem9vbTtcbiAgICB9O1xuICAgIHZhciBjbG9uZSA9IGZ1bmN0aW9uIGNsb25lMigpIHtcbiAgICAgIHZhciBvcHRpb25zMiA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdm9pZCAwID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgICByZXR1cm4gbWVkaXVtWm9vbTIoX2V4dGVuZHMoe30sIHpvb21PcHRpb25zLCBvcHRpb25zMikpO1xuICAgIH07XG4gICAgdmFyIGF0dGFjaCA9IGZ1bmN0aW9uIGF0dGFjaDIoKSB7XG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgc2VsZWN0b3JzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIHNlbGVjdG9yc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cbiAgICAgIHZhciBuZXdJbWFnZXMgPSBzZWxlY3RvcnMucmVkdWNlKGZ1bmN0aW9uKGltYWdlc0FjY3VtdWxhdG9yLCBjdXJyZW50U2VsZWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIFtdLmNvbmNhdChpbWFnZXNBY2N1bXVsYXRvciwgZ2V0SW1hZ2VzRnJvbVNlbGVjdG9yKGN1cnJlbnRTZWxlY3RvcikpO1xuICAgICAgfSwgW10pO1xuICAgICAgbmV3SW1hZ2VzLmZpbHRlcihmdW5jdGlvbihuZXdJbWFnZSkge1xuICAgICAgICByZXR1cm4gaW1hZ2VzLmluZGV4T2YobmV3SW1hZ2UpID09PSAtMTtcbiAgICAgIH0pLmZvckVhY2goZnVuY3Rpb24obmV3SW1hZ2UpIHtcbiAgICAgICAgaW1hZ2VzLnB1c2gobmV3SW1hZ2UpO1xuICAgICAgICBuZXdJbWFnZS5jbGFzc0xpc3QuYWRkKFwibWVkaXVtLXpvb20taW1hZ2VcIik7XG4gICAgICB9KTtcbiAgICAgIGV2ZW50TGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24oX3JlZikge1xuICAgICAgICB2YXIgdHlwZSA9IF9yZWYudHlwZSwgbGlzdGVuZXIgPSBfcmVmLmxpc3RlbmVyLCBvcHRpb25zMiA9IF9yZWYub3B0aW9ucztcbiAgICAgICAgbmV3SW1hZ2VzLmZvckVhY2goZnVuY3Rpb24oaW1hZ2UpIHtcbiAgICAgICAgICBpbWFnZS5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyLCBvcHRpb25zMik7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gem9vbTtcbiAgICB9O1xuICAgIHZhciBkZXRhY2ggPSBmdW5jdGlvbiBkZXRhY2gyKCkge1xuICAgICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBzZWxlY3RvcnMgPSBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgICBzZWxlY3RvcnNbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICAgIH1cbiAgICAgIGlmIChhY3RpdmUuem9vbWVkKSB7XG4gICAgICAgIGNsb3NlKCk7XG4gICAgICB9XG4gICAgICB2YXIgaW1hZ2VzVG9EZXRhY2ggPSBzZWxlY3RvcnMubGVuZ3RoID4gMCA/IHNlbGVjdG9ycy5yZWR1Y2UoZnVuY3Rpb24oaW1hZ2VzQWNjdW11bGF0b3IsIGN1cnJlbnRTZWxlY3Rvcikge1xuICAgICAgICByZXR1cm4gW10uY29uY2F0KGltYWdlc0FjY3VtdWxhdG9yLCBnZXRJbWFnZXNGcm9tU2VsZWN0b3IoY3VycmVudFNlbGVjdG9yKSk7XG4gICAgICB9LCBbXSkgOiBpbWFnZXM7XG4gICAgICBpbWFnZXNUb0RldGFjaC5mb3JFYWNoKGZ1bmN0aW9uKGltYWdlKSB7XG4gICAgICAgIGltYWdlLmNsYXNzTGlzdC5yZW1vdmUoXCJtZWRpdW0tem9vbS1pbWFnZVwiKTtcbiAgICAgICAgaW1hZ2UuZGlzcGF0Y2hFdmVudChjcmVhdGVDdXN0b21FdmVudChcIm1lZGl1bS16b29tOmRldGFjaFwiLCB7XG4gICAgICAgICAgZGV0YWlsOiB7IHpvb20gfVxuICAgICAgICB9KSk7XG4gICAgICB9KTtcbiAgICAgIGltYWdlcyA9IGltYWdlcy5maWx0ZXIoZnVuY3Rpb24oaW1hZ2UpIHtcbiAgICAgICAgcmV0dXJuIGltYWdlc1RvRGV0YWNoLmluZGV4T2YoaW1hZ2UpID09PSAtMTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHpvb207XG4gICAgfTtcbiAgICB2YXIgb24gPSBmdW5jdGlvbiBvbjIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIHZhciBvcHRpb25zMiA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdm9pZCAwID8gYXJndW1lbnRzWzJdIDoge307XG4gICAgICBpbWFnZXMuZm9yRWFjaChmdW5jdGlvbihpbWFnZSkge1xuICAgICAgICBpbWFnZS5hZGRFdmVudExpc3RlbmVyKFwibWVkaXVtLXpvb206XCIgKyB0eXBlLCBsaXN0ZW5lciwgb3B0aW9uczIpO1xuICAgICAgfSk7XG4gICAgICBldmVudExpc3RlbmVycy5wdXNoKHsgdHlwZTogXCJtZWRpdW0tem9vbTpcIiArIHR5cGUsIGxpc3RlbmVyLCBvcHRpb25zOiBvcHRpb25zMiB9KTtcbiAgICAgIHJldHVybiB6b29tO1xuICAgIH07XG4gICAgdmFyIG9mZiA9IGZ1bmN0aW9uIG9mZjIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIHZhciBvcHRpb25zMiA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdm9pZCAwID8gYXJndW1lbnRzWzJdIDoge307XG4gICAgICBpbWFnZXMuZm9yRWFjaChmdW5jdGlvbihpbWFnZSkge1xuICAgICAgICBpbWFnZS5yZW1vdmVFdmVudExpc3RlbmVyKFwibWVkaXVtLXpvb206XCIgKyB0eXBlLCBsaXN0ZW5lciwgb3B0aW9uczIpO1xuICAgICAgfSk7XG4gICAgICBldmVudExpc3RlbmVycyA9IGV2ZW50TGlzdGVuZXJzLmZpbHRlcihmdW5jdGlvbihldmVudExpc3RlbmVyKSB7XG4gICAgICAgIHJldHVybiAhKGV2ZW50TGlzdGVuZXIudHlwZSA9PT0gXCJtZWRpdW0tem9vbTpcIiArIHR5cGUgJiYgZXZlbnRMaXN0ZW5lci5saXN0ZW5lci50b1N0cmluZygpID09PSBsaXN0ZW5lci50b1N0cmluZygpKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHpvb207XG4gICAgfTtcbiAgICB2YXIgb3BlbiA9IGZ1bmN0aW9uIG9wZW4yKCkge1xuICAgICAgdmFyIF9yZWYyID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB2b2lkIDAgPyBhcmd1bWVudHNbMF0gOiB7fSwgdGFyZ2V0ID0gX3JlZjIudGFyZ2V0O1xuICAgICAgdmFyIF9hbmltYXRlID0gZnVuY3Rpb24gX2FuaW1hdGUyKCkge1xuICAgICAgICB2YXIgY29udGFpbmVyID0ge1xuICAgICAgICAgIHdpZHRoOiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGgsXG4gICAgICAgICAgaGVpZ2h0OiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0LFxuICAgICAgICAgIGxlZnQ6IDAsXG4gICAgICAgICAgdG9wOiAwLFxuICAgICAgICAgIHJpZ2h0OiAwLFxuICAgICAgICAgIGJvdHRvbTogMFxuICAgICAgICB9O1xuICAgICAgICB2YXIgdmlld3BvcnRXaWR0aCA9IHZvaWQgMDtcbiAgICAgICAgdmFyIHZpZXdwb3J0SGVpZ2h0ID0gdm9pZCAwO1xuICAgICAgICBpZiAoem9vbU9wdGlvbnMuY29udGFpbmVyKSB7XG4gICAgICAgICAgaWYgKHpvb21PcHRpb25zLmNvbnRhaW5lciBpbnN0YW5jZW9mIE9iamVjdCkge1xuICAgICAgICAgICAgY29udGFpbmVyID0gX2V4dGVuZHMoe30sIGNvbnRhaW5lciwgem9vbU9wdGlvbnMuY29udGFpbmVyKTtcbiAgICAgICAgICAgIHZpZXdwb3J0V2lkdGggPSBjb250YWluZXIud2lkdGggLSBjb250YWluZXIubGVmdCAtIGNvbnRhaW5lci5yaWdodCAtIHpvb21PcHRpb25zLm1hcmdpbiAqIDI7XG4gICAgICAgICAgICB2aWV3cG9ydEhlaWdodCA9IGNvbnRhaW5lci5oZWlnaHQgLSBjb250YWluZXIudG9wIC0gY29udGFpbmVyLmJvdHRvbSAtIHpvb21PcHRpb25zLm1hcmdpbiAqIDI7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciB6b29tQ29udGFpbmVyID0gaXNOb2RlKHpvb21PcHRpb25zLmNvbnRhaW5lcikgPyB6b29tT3B0aW9ucy5jb250YWluZXIgOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHpvb21PcHRpb25zLmNvbnRhaW5lcik7XG4gICAgICAgICAgICB2YXIgX3pvb21Db250YWluZXIkZ2V0Qm91ID0gem9vbUNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSwgX3dpZHRoID0gX3pvb21Db250YWluZXIkZ2V0Qm91LndpZHRoLCBfaGVpZ2h0ID0gX3pvb21Db250YWluZXIkZ2V0Qm91LmhlaWdodCwgX2xlZnQgPSBfem9vbUNvbnRhaW5lciRnZXRCb3UubGVmdCwgX3RvcCA9IF96b29tQ29udGFpbmVyJGdldEJvdS50b3A7XG4gICAgICAgICAgICBjb250YWluZXIgPSBfZXh0ZW5kcyh7fSwgY29udGFpbmVyLCB7XG4gICAgICAgICAgICAgIHdpZHRoOiBfd2lkdGgsXG4gICAgICAgICAgICAgIGhlaWdodDogX2hlaWdodCxcbiAgICAgICAgICAgICAgbGVmdDogX2xlZnQsXG4gICAgICAgICAgICAgIHRvcDogX3RvcFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZpZXdwb3J0V2lkdGggPSB2aWV3cG9ydFdpZHRoIHx8IGNvbnRhaW5lci53aWR0aCAtIHpvb21PcHRpb25zLm1hcmdpbiAqIDI7XG4gICAgICAgIHZpZXdwb3J0SGVpZ2h0ID0gdmlld3BvcnRIZWlnaHQgfHwgY29udGFpbmVyLmhlaWdodCAtIHpvb21PcHRpb25zLm1hcmdpbiAqIDI7XG4gICAgICAgIHZhciB6b29tVGFyZ2V0ID0gYWN0aXZlLnpvb21lZEhkIHx8IGFjdGl2ZS5vcmlnaW5hbDtcbiAgICAgICAgdmFyIG5hdHVyYWxXaWR0aCA9IGlzU3ZnKHpvb21UYXJnZXQpID8gdmlld3BvcnRXaWR0aCA6IHpvb21UYXJnZXQubmF0dXJhbFdpZHRoIHx8IHZpZXdwb3J0V2lkdGg7XG4gICAgICAgIHZhciBuYXR1cmFsSGVpZ2h0ID0gaXNTdmcoem9vbVRhcmdldCkgPyB2aWV3cG9ydEhlaWdodCA6IHpvb21UYXJnZXQubmF0dXJhbEhlaWdodCB8fCB2aWV3cG9ydEhlaWdodDtcbiAgICAgICAgdmFyIF96b29tVGFyZ2V0JGdldEJvdW5kaSA9IHpvb21UYXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksIHRvcCA9IF96b29tVGFyZ2V0JGdldEJvdW5kaS50b3AsIGxlZnQgPSBfem9vbVRhcmdldCRnZXRCb3VuZGkubGVmdCwgd2lkdGggPSBfem9vbVRhcmdldCRnZXRCb3VuZGkud2lkdGgsIGhlaWdodCA9IF96b29tVGFyZ2V0JGdldEJvdW5kaS5oZWlnaHQ7XG4gICAgICAgIHZhciBzY2FsZVggPSBNYXRoLm1pbihNYXRoLm1heCh3aWR0aCwgbmF0dXJhbFdpZHRoKSwgdmlld3BvcnRXaWR0aCkgLyB3aWR0aDtcbiAgICAgICAgdmFyIHNjYWxlWSA9IE1hdGgubWluKE1hdGgubWF4KGhlaWdodCwgbmF0dXJhbEhlaWdodCksIHZpZXdwb3J0SGVpZ2h0KSAvIGhlaWdodDtcbiAgICAgICAgdmFyIHNjYWxlID0gTWF0aC5taW4oc2NhbGVYLCBzY2FsZVkpO1xuICAgICAgICB2YXIgdHJhbnNsYXRlWCA9ICgtbGVmdCArICh2aWV3cG9ydFdpZHRoIC0gd2lkdGgpIC8gMiArIHpvb21PcHRpb25zLm1hcmdpbiArIGNvbnRhaW5lci5sZWZ0KSAvIHNjYWxlO1xuICAgICAgICB2YXIgdHJhbnNsYXRlWSA9ICgtdG9wICsgKHZpZXdwb3J0SGVpZ2h0IC0gaGVpZ2h0KSAvIDIgKyB6b29tT3B0aW9ucy5tYXJnaW4gKyBjb250YWluZXIudG9wKSAvIHNjYWxlO1xuICAgICAgICB2YXIgdHJhbnNmb3JtID0gXCJzY2FsZShcIiArIHNjYWxlICsgXCIpIHRyYW5zbGF0ZTNkKFwiICsgdHJhbnNsYXRlWCArIFwicHgsIFwiICsgdHJhbnNsYXRlWSArIFwicHgsIDApXCI7XG4gICAgICAgIGFjdGl2ZS56b29tZWQuc3R5bGUudHJhbnNmb3JtID0gdHJhbnNmb3JtO1xuICAgICAgICBpZiAoYWN0aXZlLnpvb21lZEhkKSB7XG4gICAgICAgICAgYWN0aXZlLnpvb21lZEhkLnN0eWxlLnRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZTIoZnVuY3Rpb24ocmVzb2x2ZSkge1xuICAgICAgICBpZiAodGFyZ2V0ICYmIGltYWdlcy5pbmRleE9mKHRhcmdldCkgPT09IC0xKSB7XG4gICAgICAgICAgcmVzb2x2ZSh6b29tKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIF9oYW5kbGVPcGVuRW5kID0gZnVuY3Rpb24gX2hhbmRsZU9wZW5FbmQyKCkge1xuICAgICAgICAgIGlzQW5pbWF0aW5nID0gZmFsc2U7XG4gICAgICAgICAgYWN0aXZlLnpvb21lZC5yZW1vdmVFdmVudExpc3RlbmVyKFwidHJhbnNpdGlvbmVuZFwiLCBfaGFuZGxlT3BlbkVuZDIpO1xuICAgICAgICAgIGFjdGl2ZS5vcmlnaW5hbC5kaXNwYXRjaEV2ZW50KGNyZWF0ZUN1c3RvbUV2ZW50KFwibWVkaXVtLXpvb206b3BlbmVkXCIsIHtcbiAgICAgICAgICAgIGRldGFpbDogeyB6b29tIH1cbiAgICAgICAgICB9KSk7XG4gICAgICAgICAgcmVzb2x2ZSh6b29tKTtcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKGFjdGl2ZS56b29tZWQpIHtcbiAgICAgICAgICByZXNvbHZlKHpvb20pO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGFyZ2V0KSB7XG4gICAgICAgICAgYWN0aXZlLm9yaWdpbmFsID0gdGFyZ2V0O1xuICAgICAgICB9IGVsc2UgaWYgKGltYWdlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgdmFyIF9pbWFnZXMgPSBpbWFnZXM7XG4gICAgICAgICAgYWN0aXZlLm9yaWdpbmFsID0gX2ltYWdlc1swXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXNvbHZlKHpvb20pO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBhY3RpdmUub3JpZ2luYWwuZGlzcGF0Y2hFdmVudChjcmVhdGVDdXN0b21FdmVudChcIm1lZGl1bS16b29tOm9wZW5cIiwge1xuICAgICAgICAgIGRldGFpbDogeyB6b29tIH1cbiAgICAgICAgfSkpO1xuICAgICAgICBzY3JvbGxUb3AgPSB3aW5kb3cucGFnZVlPZmZzZXQgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCB8fCBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcCB8fCAwO1xuICAgICAgICBpc0FuaW1hdGluZyA9IHRydWU7XG4gICAgICAgIGFjdGl2ZS56b29tZWQgPSBjbG9uZVRhcmdldChhY3RpdmUub3JpZ2luYWwpO1xuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKG92ZXJsYXkpO1xuICAgICAgICBpZiAoem9vbU9wdGlvbnMudGVtcGxhdGUpIHtcbiAgICAgICAgICB2YXIgdGVtcGxhdGUgPSBpc05vZGUoem9vbU9wdGlvbnMudGVtcGxhdGUpID8gem9vbU9wdGlvbnMudGVtcGxhdGUgOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHpvb21PcHRpb25zLnRlbXBsYXRlKTtcbiAgICAgICAgICBhY3RpdmUudGVtcGxhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgIGFjdGl2ZS50ZW1wbGF0ZS5hcHBlbmRDaGlsZCh0ZW1wbGF0ZS5jb250ZW50LmNsb25lTm9kZSh0cnVlKSk7XG4gICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChhY3RpdmUudGVtcGxhdGUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhY3RpdmUub3JpZ2luYWwucGFyZW50RWxlbWVudCAmJiBhY3RpdmUub3JpZ2luYWwucGFyZW50RWxlbWVudC50YWdOYW1lID09PSBcIlBJQ1RVUkVcIiAmJiBhY3RpdmUub3JpZ2luYWwuY3VycmVudFNyYykge1xuICAgICAgICAgIGFjdGl2ZS56b29tZWQuc3JjID0gYWN0aXZlLm9yaWdpbmFsLmN1cnJlbnRTcmM7XG4gICAgICAgIH1cbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChhY3RpdmUuem9vbWVkKTtcbiAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbigpIHtcbiAgICAgICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoXCJtZWRpdW0tem9vbS0tb3BlbmVkXCIpO1xuICAgICAgICB9KTtcbiAgICAgICAgYWN0aXZlLm9yaWdpbmFsLmNsYXNzTGlzdC5hZGQoXCJtZWRpdW0tem9vbS1pbWFnZS0taGlkZGVuXCIpO1xuICAgICAgICBhY3RpdmUuem9vbWVkLmNsYXNzTGlzdC5hZGQoXCJtZWRpdW0tem9vbS1pbWFnZS0tb3BlbmVkXCIpO1xuICAgICAgICBhY3RpdmUuem9vbWVkLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBjbG9zZSk7XG4gICAgICAgIGFjdGl2ZS56b29tZWQuYWRkRXZlbnRMaXN0ZW5lcihcInRyYW5zaXRpb25lbmRcIiwgX2hhbmRsZU9wZW5FbmQpO1xuICAgICAgICBpZiAoYWN0aXZlLm9yaWdpbmFsLmdldEF0dHJpYnV0ZShcImRhdGEtem9vbS1zcmNcIikpIHtcbiAgICAgICAgICBhY3RpdmUuem9vbWVkSGQgPSBhY3RpdmUuem9vbWVkLmNsb25lTm9kZSgpO1xuICAgICAgICAgIGFjdGl2ZS56b29tZWRIZC5yZW1vdmVBdHRyaWJ1dGUoXCJzcmNzZXRcIik7XG4gICAgICAgICAgYWN0aXZlLnpvb21lZEhkLnJlbW92ZUF0dHJpYnV0ZShcInNpemVzXCIpO1xuICAgICAgICAgIGFjdGl2ZS56b29tZWRIZC5yZW1vdmVBdHRyaWJ1dGUoXCJsb2FkaW5nXCIpO1xuICAgICAgICAgIGFjdGl2ZS56b29tZWRIZC5zcmMgPSBhY3RpdmUuem9vbWVkLmdldEF0dHJpYnV0ZShcImRhdGEtem9vbS1zcmNcIik7XG4gICAgICAgICAgYWN0aXZlLnpvb21lZEhkLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoZ2V0Wm9vbVRhcmdldFNpemUpO1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFwiVW5hYmxlIHRvIHJlYWNoIHRoZSB6b29tIGltYWdlIHRhcmdldCBcIiArIGFjdGl2ZS56b29tZWRIZC5zcmMpO1xuICAgICAgICAgICAgYWN0aXZlLnpvb21lZEhkID0gbnVsbDtcbiAgICAgICAgICAgIF9hbmltYXRlKCk7XG4gICAgICAgICAgfTtcbiAgICAgICAgICB2YXIgZ2V0Wm9vbVRhcmdldFNpemUgPSBzZXRJbnRlcnZhbChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmIChhY3RpdmUuem9vbWVkSGQuY29tcGxldGUpIHtcbiAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChnZXRab29tVGFyZ2V0U2l6ZSk7XG4gICAgICAgICAgICAgIGFjdGl2ZS56b29tZWRIZC5jbGFzc0xpc3QuYWRkKFwibWVkaXVtLXpvb20taW1hZ2UtLW9wZW5lZFwiKTtcbiAgICAgICAgICAgICAgYWN0aXZlLnpvb21lZEhkLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBjbG9zZSk7XG4gICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoYWN0aXZlLnpvb21lZEhkKTtcbiAgICAgICAgICAgICAgX2FuaW1hdGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCAxMCk7XG4gICAgICAgIH0gZWxzZSBpZiAoYWN0aXZlLm9yaWdpbmFsLmhhc0F0dHJpYnV0ZShcInNyY3NldFwiKSkge1xuICAgICAgICAgIGFjdGl2ZS56b29tZWRIZCA9IGFjdGl2ZS56b29tZWQuY2xvbmVOb2RlKCk7XG4gICAgICAgICAgYWN0aXZlLnpvb21lZEhkLnJlbW92ZUF0dHJpYnV0ZShcInNpemVzXCIpO1xuICAgICAgICAgIGFjdGl2ZS56b29tZWRIZC5yZW1vdmVBdHRyaWJ1dGUoXCJsb2FkaW5nXCIpO1xuICAgICAgICAgIHZhciBsb2FkRXZlbnRMaXN0ZW5lciA9IGFjdGl2ZS56b29tZWRIZC5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGFjdGl2ZS56b29tZWRIZC5yZW1vdmVFdmVudExpc3RlbmVyKFwibG9hZFwiLCBsb2FkRXZlbnRMaXN0ZW5lcik7XG4gICAgICAgICAgICBhY3RpdmUuem9vbWVkSGQuY2xhc3NMaXN0LmFkZChcIm1lZGl1bS16b29tLWltYWdlLS1vcGVuZWRcIik7XG4gICAgICAgICAgICBhY3RpdmUuem9vbWVkSGQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGNsb3NlKTtcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoYWN0aXZlLnpvb21lZEhkKTtcbiAgICAgICAgICAgIF9hbmltYXRlKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX2FuaW1hdGUoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcbiAgICB2YXIgY2xvc2UgPSBmdW5jdGlvbiBjbG9zZTIoKSB7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UyKGZ1bmN0aW9uKHJlc29sdmUpIHtcbiAgICAgICAgaWYgKGlzQW5pbWF0aW5nIHx8ICFhY3RpdmUub3JpZ2luYWwpIHtcbiAgICAgICAgICByZXNvbHZlKHpvb20pO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgX2hhbmRsZUNsb3NlRW5kID0gZnVuY3Rpb24gX2hhbmRsZUNsb3NlRW5kMigpIHtcbiAgICAgICAgICBhY3RpdmUub3JpZ2luYWwuY2xhc3NMaXN0LnJlbW92ZShcIm1lZGl1bS16b29tLWltYWdlLS1oaWRkZW5cIik7XG4gICAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChhY3RpdmUuem9vbWVkKTtcbiAgICAgICAgICBpZiAoYWN0aXZlLnpvb21lZEhkKSB7XG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGFjdGl2ZS56b29tZWRIZCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQob3ZlcmxheSk7XG4gICAgICAgICAgYWN0aXZlLnpvb21lZC5jbGFzc0xpc3QucmVtb3ZlKFwibWVkaXVtLXpvb20taW1hZ2UtLW9wZW5lZFwiKTtcbiAgICAgICAgICBpZiAoYWN0aXZlLnRlbXBsYXRlKSB7XG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGFjdGl2ZS50ZW1wbGF0ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlzQW5pbWF0aW5nID0gZmFsc2U7XG4gICAgICAgICAgYWN0aXZlLnpvb21lZC5yZW1vdmVFdmVudExpc3RlbmVyKFwidHJhbnNpdGlvbmVuZFwiLCBfaGFuZGxlQ2xvc2VFbmQyKTtcbiAgICAgICAgICBhY3RpdmUub3JpZ2luYWwuZGlzcGF0Y2hFdmVudChjcmVhdGVDdXN0b21FdmVudChcIm1lZGl1bS16b29tOmNsb3NlZFwiLCB7XG4gICAgICAgICAgICBkZXRhaWw6IHsgem9vbSB9XG4gICAgICAgICAgfSkpO1xuICAgICAgICAgIGFjdGl2ZS5vcmlnaW5hbCA9IG51bGw7XG4gICAgICAgICAgYWN0aXZlLnpvb21lZCA9IG51bGw7XG4gICAgICAgICAgYWN0aXZlLnpvb21lZEhkID0gbnVsbDtcbiAgICAgICAgICBhY3RpdmUudGVtcGxhdGUgPSBudWxsO1xuICAgICAgICAgIHJlc29sdmUoem9vbSk7XG4gICAgICAgIH07XG4gICAgICAgIGlzQW5pbWF0aW5nID0gdHJ1ZTtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QucmVtb3ZlKFwibWVkaXVtLXpvb20tLW9wZW5lZFwiKTtcbiAgICAgICAgYWN0aXZlLnpvb21lZC5zdHlsZS50cmFuc2Zvcm0gPSBcIlwiO1xuICAgICAgICBpZiAoYWN0aXZlLnpvb21lZEhkKSB7XG4gICAgICAgICAgYWN0aXZlLnpvb21lZEhkLnN0eWxlLnRyYW5zZm9ybSA9IFwiXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFjdGl2ZS50ZW1wbGF0ZSkge1xuICAgICAgICAgIGFjdGl2ZS50ZW1wbGF0ZS5zdHlsZS50cmFuc2l0aW9uID0gXCJvcGFjaXR5IDE1MG1zXCI7XG4gICAgICAgICAgYWN0aXZlLnRlbXBsYXRlLnN0eWxlLm9wYWNpdHkgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGFjdGl2ZS5vcmlnaW5hbC5kaXNwYXRjaEV2ZW50KGNyZWF0ZUN1c3RvbUV2ZW50KFwibWVkaXVtLXpvb206Y2xvc2VcIiwge1xuICAgICAgICAgIGRldGFpbDogeyB6b29tIH1cbiAgICAgICAgfSkpO1xuICAgICAgICBhY3RpdmUuem9vbWVkLmFkZEV2ZW50TGlzdGVuZXIoXCJ0cmFuc2l0aW9uZW5kXCIsIF9oYW5kbGVDbG9zZUVuZCk7XG4gICAgICB9KTtcbiAgICB9O1xuICAgIHZhciB0b2dnbGUgPSBmdW5jdGlvbiB0b2dnbGUyKCkge1xuICAgICAgdmFyIF9yZWYzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB2b2lkIDAgPyBhcmd1bWVudHNbMF0gOiB7fSwgdGFyZ2V0ID0gX3JlZjMudGFyZ2V0O1xuICAgICAgaWYgKGFjdGl2ZS5vcmlnaW5hbCkge1xuICAgICAgICByZXR1cm4gY2xvc2UoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvcGVuKHsgdGFyZ2V0IH0pO1xuICAgIH07XG4gICAgdmFyIGdldE9wdGlvbnMgPSBmdW5jdGlvbiBnZXRPcHRpb25zMigpIHtcbiAgICAgIHJldHVybiB6b29tT3B0aW9ucztcbiAgICB9O1xuICAgIHZhciBnZXRJbWFnZXMgPSBmdW5jdGlvbiBnZXRJbWFnZXMyKCkge1xuICAgICAgcmV0dXJuIGltYWdlcztcbiAgICB9O1xuICAgIHZhciBnZXRab29tZWRJbWFnZSA9IGZ1bmN0aW9uIGdldFpvb21lZEltYWdlMigpIHtcbiAgICAgIHJldHVybiBhY3RpdmUub3JpZ2luYWw7XG4gICAgfTtcbiAgICB2YXIgaW1hZ2VzID0gW107XG4gICAgdmFyIGV2ZW50TGlzdGVuZXJzID0gW107XG4gICAgdmFyIGlzQW5pbWF0aW5nID0gZmFsc2U7XG4gICAgdmFyIHNjcm9sbFRvcCA9IDA7XG4gICAgdmFyIHpvb21PcHRpb25zID0gb3B0aW9ucztcbiAgICB2YXIgYWN0aXZlID0ge1xuICAgICAgb3JpZ2luYWw6IG51bGwsXG4gICAgICB6b29tZWQ6IG51bGwsXG4gICAgICB6b29tZWRIZDogbnVsbCxcbiAgICAgIHRlbXBsYXRlOiBudWxsXG4gICAgICAvLyBJZiB0aGUgc2VsZWN0b3IgaXMgb21pdHRlZCwgaXQncyByZXBsYWNlZCBieSB0aGUgb3B0aW9uc1xuICAgIH07XG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChzZWxlY3RvcikgPT09IFwiW29iamVjdCBPYmplY3RdXCIpIHtcbiAgICAgIHpvb21PcHRpb25zID0gc2VsZWN0b3I7XG4gICAgfSBlbHNlIGlmIChzZWxlY3RvciB8fCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIGF0dGFjaChzZWxlY3Rvcik7XG4gICAgfVxuICAgIHpvb21PcHRpb25zID0gX2V4dGVuZHMoe1xuICAgICAgbWFyZ2luOiAwLFxuICAgICAgYmFja2dyb3VuZDogXCIjZmZmXCIsXG4gICAgICBzY3JvbGxPZmZzZXQ6IDQwLFxuICAgICAgY29udGFpbmVyOiBudWxsLFxuICAgICAgdGVtcGxhdGU6IG51bGxcbiAgICB9LCB6b29tT3B0aW9ucyk7XG4gICAgdmFyIG92ZXJsYXkgPSBjcmVhdGVPdmVybGF5KHpvb21PcHRpb25zLmJhY2tncm91bmQpO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBfaGFuZGxlQ2xpY2spO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXl1cFwiLCBfaGFuZGxlS2V5VXApO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIiwgX2hhbmRsZVNjcm9sbCk7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgY2xvc2UpO1xuICAgIHZhciB6b29tID0ge1xuICAgICAgb3BlbixcbiAgICAgIGNsb3NlLFxuICAgICAgdG9nZ2xlLFxuICAgICAgdXBkYXRlLFxuICAgICAgY2xvbmUsXG4gICAgICBhdHRhY2gsXG4gICAgICBkZXRhY2gsXG4gICAgICBvbixcbiAgICAgIG9mZixcbiAgICAgIGdldE9wdGlvbnMsXG4gICAgICBnZXRJbWFnZXMsXG4gICAgICBnZXRab29tZWRJbWFnZVxuICAgIH07XG4gICAgcmV0dXJuIHpvb207XG4gIH07XG4gIGZ1bmN0aW9uIHN0eWxlSW5qZWN0KGNzczIsIHJlZikge1xuICAgIGlmIChyZWYgPT09IHZvaWQgMCkgcmVmID0ge307XG4gICAgdmFyIGluc2VydEF0ID0gcmVmLmluc2VydEF0O1xuICAgIGlmICghY3NzMiB8fCB0eXBlb2YgZG9jdW1lbnQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGhlYWQgPSBkb2N1bWVudC5oZWFkIHx8IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiaGVhZFwiKVswXTtcbiAgICB2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gICAgc3R5bGUudHlwZSA9IFwidGV4dC9jc3NcIjtcbiAgICBpZiAoaW5zZXJ0QXQgPT09IFwidG9wXCIpIHtcbiAgICAgIGlmIChoZWFkLmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgaGVhZC5pbnNlcnRCZWZvcmUoc3R5bGUsIGhlYWQuZmlyc3RDaGlsZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBoZWFkLmFwcGVuZENoaWxkKHN0eWxlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaGVhZC5hcHBlbmRDaGlsZChzdHlsZSk7XG4gICAgfVxuICAgIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3MyO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MyKSk7XG4gICAgfVxuICB9XG4gIHZhciBjc3MgPSBcIi5tZWRpdW0tem9vbS1vdmVybGF5e3Bvc2l0aW9uOmZpeGVkO3RvcDowO3JpZ2h0OjA7Ym90dG9tOjA7bGVmdDowO29wYWNpdHk6MDt0cmFuc2l0aW9uOm9wYWNpdHkgLjNzO3dpbGwtY2hhbmdlOm9wYWNpdHl9Lm1lZGl1bS16b29tLS1vcGVuZWQgLm1lZGl1bS16b29tLW92ZXJsYXl7Y3Vyc29yOnBvaW50ZXI7Y3Vyc29yOnpvb20tb3V0O29wYWNpdHk6MX0ubWVkaXVtLXpvb20taW1hZ2V7Y3Vyc29yOnBvaW50ZXI7Y3Vyc29yOnpvb20taW47dHJhbnNpdGlvbjp0cmFuc2Zvcm0gLjNzIGN1YmljLWJlemllciguMiwwLC4yLDEpIWltcG9ydGFudH0ubWVkaXVtLXpvb20taW1hZ2UtLWhpZGRlbnt2aXNpYmlsaXR5OmhpZGRlbn0ubWVkaXVtLXpvb20taW1hZ2UtLW9wZW5lZHtwb3NpdGlvbjpyZWxhdGl2ZTtjdXJzb3I6cG9pbnRlcjtjdXJzb3I6em9vbS1vdXQ7d2lsbC1jaGFuZ2U6dHJhbnNmb3JtfVwiO1xuICBzdHlsZUluamVjdChjc3MpO1xuICB2YXIgbWVkaXVtX3pvb21fZXNtX2RlZmF1bHQgPSBtZWRpdW1ab29tO1xuXG4gIC8vIG5zLXBhcmFtczpAcGFyYW1zXG4gIHZhciBodWdvRW52aXJvbm1lbnQgPSBcImRldmVsb3BtZW50XCI7XG4gIHZhciBpMThuID0geyBjb3BpZWQ6IFwiQ29waWVkXCIsIGNvcHk6IFwiXFx1QkNGNVxcdUMwQUNcIiB9O1xuICB2YXIgc2VhcmNoRW5hYmxlZCA9IGZhbHNlO1xuXG4gIC8vIG5zLWh1Z286QzpcXFVzZXJzXFxxYXp3c1xcQXBwRGF0YVxcTG9jYWxcXGh1Z29fY2FjaGVcXG1vZHVsZXNcXGZpbGVjYWNoZVxcbW9kdWxlc1xccGtnXFxtb2RcXGdpdGh1Yi5jb21cXCFodWdvIWJsb3hcXGh1Z28tYmxveC1idWlsZGVyXFxtb2R1bGVzXFxibG94LWJvb3RzdHJhcFxcdjVAdjUuOS43XFxhc3NldHNcXGpzXFx3b3djaGVteS11dGlscy5qc1xuICBmdW5jdGlvbiBzY3JvbGxQYXJlbnRUb0NoaWxkKHBhcmVudCwgY2hpbGQpIHtcbiAgICBjb25zdCBwYXJlbnRSZWN0ID0gcGFyZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIGNvbnN0IHBhcmVudFZpZXdhYmxlQXJlYSA9IHtcbiAgICAgIGhlaWdodDogcGFyZW50LmNsaWVudEhlaWdodCxcbiAgICAgIHdpZHRoOiBwYXJlbnQuY2xpZW50V2lkdGhcbiAgICB9O1xuICAgIGNvbnN0IGNoaWxkUmVjdCA9IGNoaWxkLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIGNvbnN0IGlzQ2hpbGRJblZpZXcgPSBjaGlsZFJlY3QudG9wID49IHBhcmVudFJlY3QudG9wICYmIGNoaWxkUmVjdC5ib3R0b20gPD0gcGFyZW50UmVjdC50b3AgKyBwYXJlbnRWaWV3YWJsZUFyZWEuaGVpZ2h0O1xuICAgIGlmICghaXNDaGlsZEluVmlldykge1xuICAgICAgcGFyZW50LnNjcm9sbFRvcCA9IGNoaWxkUmVjdC50b3AgKyBwYXJlbnQuc2Nyb2xsVG9wIC0gcGFyZW50UmVjdC50b3A7XG4gICAgfVxuICB9XG5cbiAgLy8gbnMtaHVnbzpDOlxcVXNlcnNcXHFhendzXFxBcHBEYXRhXFxMb2NhbFxcaHVnb19jYWNoZVxcbW9kdWxlc1xcZmlsZWNhY2hlXFxtb2R1bGVzXFxwa2dcXG1vZFxcZ2l0aHViLmNvbVxcIWh1Z28hYmxveFxcaHVnby1ibG94LWJ1aWxkZXJcXG1vZHVsZXNcXGJsb3gtYm9vdHN0cmFwXFx2NUB2NS45LjdcXGFzc2V0c1xcanNcXHdvd2NoZW15LW5hdmlnYXRpb24uanNcbiAgZnVuY3Rpb24gZ2V0TmF2QmFySGVpZ2h0KCkge1xuICAgIGxldCBuYXZiYXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm5hdmJhci1tYWluXCIpO1xuICAgIGxldCBuYXZiYXJIZWlnaHQgPSBuYXZiYXIgPyBuYXZiYXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0IDogMDtcbiAgICBjb25zb2xlLmRlYnVnKFwiTmF2YmFyIGhlaWdodDogXCIgKyBuYXZiYXJIZWlnaHQpO1xuICAgIHJldHVybiBuYXZiYXJIZWlnaHQ7XG4gIH1cbiAgZnVuY3Rpb24gc2Nyb2xsVG9BbmNob3IodGFyZ2V0LCBkdXJhdGlvbiA9IDApIHtcbiAgICB0YXJnZXQgPSB0eXBlb2YgdGFyZ2V0ID09PSBcInVuZGVmaW5lZFwiIHx8IHR5cGVvZiB0YXJnZXQgPT09IFwib2JqZWN0XCIgPyBkZWNvZGVVUklDb21wb25lbnQod2luZG93LmxvY2F0aW9uLmhhc2gpIDogdGFyZ2V0O1xuICAgIGlmICgkKHRhcmdldCkubGVuZ3RoKSB7XG4gICAgICB0YXJnZXQgPSBcIiNcIiArICQuZXNjYXBlU2VsZWN0b3IodGFyZ2V0LnN1YnN0cmluZygxKSk7XG4gICAgICBsZXQgZWxlbWVudE9mZnNldCA9IE1hdGguY2VpbCgkKHRhcmdldCkub2Zmc2V0KCkudG9wIC0gZ2V0TmF2QmFySGVpZ2h0KCkpO1xuICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImJvZHlcIikuY2xhc3NMaXN0LmFkZChcInNjcm9sbGluZ1wiKTtcbiAgICAgICQoXCJodG1sLCBib2R5XCIpLmFuaW1hdGUoXG4gICAgICAgIHtcbiAgICAgICAgICBzY3JvbGxUb3A6IGVsZW1lbnRPZmZzZXRcbiAgICAgICAgfSxcbiAgICAgICAgZHVyYXRpb24sXG4gICAgICAgIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJib2R5XCIpLmNsYXNzTGlzdC5yZW1vdmUoXCJzY3JvbGxpbmdcIik7XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUuZGVidWcoXCJDYW5ub3Qgc2Nyb2xsIHRvIHRhcmdldCBgI1wiICsgdGFyZ2V0ICsgXCJgLiBJRCBub3QgZm91bmQhXCIpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBmaXhTY3JvbGxzcHkoKSB7XG4gICAgbGV0ICRib2R5ID0gJChcImJvZHlcIik7XG4gICAgbGV0IGRhdGEgPSAkYm9keS5kYXRhKFwiYnMuc2Nyb2xsc3B5XCIpO1xuICAgIGlmIChkYXRhKSB7XG4gICAgICBkYXRhLl9jb25maWcub2Zmc2V0ID0gZ2V0TmF2QmFySGVpZ2h0KCk7XG4gICAgICAkYm9keS5kYXRhKFwiYnMuc2Nyb2xsc3B5XCIsIGRhdGEpO1xuICAgICAgJGJvZHkuc2Nyb2xsc3B5KFwicmVmcmVzaFwiKTtcbiAgICB9XG4gIH1cbiAgJChcIiNuYXZiYXItbWFpbiBsaS5uYXYtaXRlbSBhLm5hdi1saW5rLCAuanMtc2Nyb2xsXCIpLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICBsZXQgaGFzaCA9IHRoaXMuaGFzaDtcbiAgICBpZiAodGhpcy5wYXRobmFtZSA9PT0gd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lICYmIGhhc2ggJiYgJChoYXNoKS5sZW5ndGggJiYgJChcIi5qcy13aWRnZXQtcGFnZVwiKS5sZW5ndGggPiAwKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgbGV0IGVsZW1lbnRPZmZzZXQgPSBNYXRoLmNlaWwoJChoYXNoKS5vZmZzZXQoKS50b3AgLSBnZXROYXZCYXJIZWlnaHQoKSk7XG4gICAgICAkKFwiaHRtbCwgYm9keVwiKS5hbmltYXRlKFxuICAgICAgICB7XG4gICAgICAgICAgc2Nyb2xsVG9wOiBlbGVtZW50T2Zmc2V0XG4gICAgICAgIH0sXG4gICAgICAgIDgwMFxuICAgICAgKTtcbiAgICB9XG4gIH0pO1xuICAkKGRvY3VtZW50KS5vbihcImNsaWNrXCIsIFwiLm5hdmJhci1jb2xsYXBzZS5zaG93XCIsIGZ1bmN0aW9uKGUpIHtcbiAgICBsZXQgdGFyZ2V0RWxlbWVudCA9ICQoZS50YXJnZXQpLmlzKFwiYVwiKSA/ICQoZS50YXJnZXQpIDogJChlLnRhcmdldCkucGFyZW50KCk7XG4gICAgaWYgKHRhcmdldEVsZW1lbnQuaXMoXCJhXCIpICYmIHRhcmdldEVsZW1lbnQuYXR0cihcImNsYXNzXCIpICE9IFwiZHJvcGRvd24tdG9nZ2xlXCIpIHtcbiAgICAgICQodGhpcykuY29sbGFwc2UoXCJoaWRlXCIpO1xuICAgIH1cbiAgfSk7XG4gICQoXCJib2R5XCIpLm9uKFwibW91c2VlbnRlciBtb3VzZWxlYXZlXCIsIFwiLmRyb3Bkb3duXCIsIGZ1bmN0aW9uKGUpIHtcbiAgICB2YXIgZHJvcGRvd24gPSAkKGUudGFyZ2V0KS5jbG9zZXN0KFwiLmRyb3Bkb3duXCIpO1xuICAgIHZhciBtZW51ID0gJChcIi5kcm9wZG93bi1tZW51XCIsIGRyb3Bkb3duKTtcbiAgICBkcm9wZG93bi5hZGRDbGFzcyhcInNob3dcIik7XG4gICAgbWVudS5hZGRDbGFzcyhcInNob3dcIik7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgIGRyb3Bkb3duW2Ryb3Bkb3duLmlzKFwiOmhvdmVyXCIpID8gXCJhZGRDbGFzc1wiIDogXCJyZW1vdmVDbGFzc1wiXShcInNob3dcIik7XG4gICAgICBtZW51W2Ryb3Bkb3duLmlzKFwiOmhvdmVyXCIpID8gXCJhZGRDbGFzc1wiIDogXCJyZW1vdmVDbGFzc1wiXShcInNob3dcIik7XG4gICAgfSwgMzAwKTtcbiAgfSk7XG4gIHZhciByZXNpemVUaW1lcjtcbiAgJCh3aW5kb3cpLnJlc2l6ZShmdW5jdGlvbigpIHtcbiAgICBjbGVhclRpbWVvdXQocmVzaXplVGltZXIpO1xuICAgIHJlc2l6ZVRpbWVyID0gc2V0VGltZW91dChmaXhTY3JvbGxzcHksIDIwMCk7XG4gIH0pO1xuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImhhc2hjaGFuZ2VcIiwgc2Nyb2xsVG9BbmNob3IpO1xuXG4gIC8vIG5zLWh1Z286QzpcXFVzZXJzXFxxYXp3c1xcQXBwRGF0YVxcTG9jYWxcXGh1Z29fY2FjaGVcXG1vZHVsZXNcXGZpbGVjYWNoZVxcbW9kdWxlc1xccGtnXFxtb2RcXGdpdGh1Yi5jb21cXCFodWdvIWJsb3hcXGh1Z28tYmxveC1idWlsZGVyXFxtb2R1bGVzXFxibG94LWJvb3RzdHJhcFxcdjVAdjUuOS43XFxhc3NldHNcXGpzXFx3b3djaGVteS1naXRodWIuanNcbiAgZnVuY3Rpb24gcHJpbnRMYXRlc3RSZWxlYXNlKHNlbGVjdG9yLCByZXBvKSB7XG4gICAgaWYgKGh1Z29FbnZpcm9ubWVudCA9PT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICQuZ2V0SlNPTihcImh0dHBzOi8vYXBpLmdpdGh1Yi5jb20vcmVwb3MvXCIgKyByZXBvICsgXCIvdGFnc1wiKS5kb25lKGZ1bmN0aW9uKGpzb24pIHtcbiAgICAgICAgbGV0IHJlbGVhc2UgPSBqc29uWzBdO1xuICAgICAgICAkKHNlbGVjdG9yKS5hcHBlbmQoXCIgXCIgKyByZWxlYXNlLm5hbWUpO1xuICAgICAgfSkuZmFpbChmdW5jdGlvbihqcXhociwgdGV4dFN0YXR1cywgZXJyb3IpIHtcbiAgICAgICAgbGV0IGVyciA9IHRleHRTdGF0dXMgKyBcIiwgXCIgKyBlcnJvcjtcbiAgICAgICAgY29uc29sZS5sb2coXCJSZXF1ZXN0IEZhaWxlZDogXCIgKyBlcnIpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgLy8gbnMtaHVnbzpDOlxcVXNlcnNcXHFhendzXFxBcHBEYXRhXFxMb2NhbFxcaHVnb19jYWNoZVxcbW9kdWxlc1xcZmlsZWNhY2hlXFxtb2R1bGVzXFxwa2dcXG1vZFxcZ2l0aHViLmNvbVxcIWh1Z28hYmxveFxcaHVnby1ibG94LWJ1aWxkZXJcXG1vZHVsZXNcXGJsb3gtYm9vdHN0cmFwXFx2NUB2NS45LjdcXGFzc2V0c1xcanNcXHdvd2NoZW15LWFuaW1hdGlvbi5qc1xuICBmdW5jdGlvbiBmYWRlSW4oZWxlbWVudCwgZHVyYXRpb24gPSA2MDApIHtcbiAgICBlbGVtZW50LnN0eWxlLmRpc3BsYXkgPSBcIlwiO1xuICAgIGVsZW1lbnQuc3R5bGUub3BhY2l0eSA9IFwiMFwiO1xuICAgIGxldCBsYXN0ID0gKy8qIEBfX1BVUkVfXyAqLyBuZXcgRGF0ZSgpO1xuICAgIGxldCB0aWNrID0gZnVuY3Rpb24oKSB7XG4gICAgICBlbGVtZW50LnN0eWxlLm9wYWNpdHkgPSAoK2VsZW1lbnQuc3R5bGUub3BhY2l0eSArICgvKiBAX19QVVJFX18gKi8gbmV3IERhdGUoKSAtIGxhc3QpIC8gZHVyYXRpb24pLnRvU3RyaW5nKCk7XG4gICAgICBsYXN0ID0gKy8qIEBfX1BVUkVfXyAqLyBuZXcgRGF0ZSgpO1xuICAgICAgaWYgKCtlbGVtZW50LnN0eWxlLm9wYWNpdHkgPCAxKSB7XG4gICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgJiYgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRpY2spIHx8IHNldFRpbWVvdXQodGljaywgMTYpO1xuICAgICAgfVxuICAgIH07XG4gICAgdGljaygpO1xuICB9XG5cbiAgLy8gbnMtaHVnbzpDOlxcVXNlcnNcXHFhendzXFxBcHBEYXRhXFxMb2NhbFxcaHVnb19jYWNoZVxcbW9kdWxlc1xcZmlsZWNhY2hlXFxtb2R1bGVzXFxwa2dcXG1vZFxcZ2l0aHViLmNvbVxcIWh1Z28hYmxveFxcaHVnby1ibG94LWJ1aWxkZXJcXG1vZHVsZXNcXGJsb3gtYm9vdHN0cmFwXFx2NUB2NS45LjdcXGFzc2V0c1xcanNcXHdvd2NoZW15LXRoZW1pbmcuanNcbiAgdmFyIGJvZHkgPSBkb2N1bWVudC5ib2R5O1xuICBmdW5jdGlvbiBnZXRUaGVtZU1vZGUoKSB7XG4gICAgcmV0dXJuIHBhcnNlSW50KGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwid2NUaGVtZVwiKSB8fCAyKTtcbiAgfVxuICBmdW5jdGlvbiBjYW5DaGFuZ2VUaGVtZSgpIHtcbiAgICByZXR1cm4gQm9vbGVhbih3aW5kb3cud2MuZGFya0xpZ2h0RW5hYmxlZCk7XG4gIH1cbiAgZnVuY3Rpb24gaW5pdFRoZW1lVmFyaWF0aW9uKCkge1xuICAgIGlmICghY2FuQ2hhbmdlVGhlbWUoKSkge1xuICAgICAgY29uc29sZS5kZWJ1ZyhcIlVzZXIgdGhlbWluZyBkaXNhYmxlZC5cIik7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBpc0RhcmtUaGVtZTogd2luZG93LndjLmlzU2l0ZVRoZW1lRGFyayxcbiAgICAgICAgdGhlbWVNb2RlOiB3aW5kb3cud2MuaXNTaXRlVGhlbWVEYXJrID8gMSA6IDBcbiAgICAgIH07XG4gICAgfVxuICAgIGNvbnNvbGUuZGVidWcoXCJVc2VyIHRoZW1pbmcgZW5hYmxlZC5cIik7XG4gICAgbGV0IGlzRGFya1RoZW1lO1xuICAgIGxldCBjdXJyZW50VGhlbWVNb2RlID0gZ2V0VGhlbWVNb2RlKCk7XG4gICAgY29uc29sZS5kZWJ1ZyhgVXNlcidzIHRoZW1lIHZhcmlhdGlvbjogJHtjdXJyZW50VGhlbWVNb2RlfWApO1xuICAgIHN3aXRjaCAoY3VycmVudFRoZW1lTW9kZSkge1xuICAgICAgY2FzZSAwOlxuICAgICAgICBpc0RhcmtUaGVtZSA9IGZhbHNlO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgaXNEYXJrVGhlbWUgPSB0cnVlO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmICh3aW5kb3cubWF0Y2hNZWRpYShcIihwcmVmZXJzLWNvbG9yLXNjaGVtZTogZGFyaylcIikubWF0Y2hlcykge1xuICAgICAgICAgIGlzRGFya1RoZW1lID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmICh3aW5kb3cubWF0Y2hNZWRpYShcIihwcmVmZXJzLWNvbG9yLXNjaGVtZTogbGlnaHQpXCIpLm1hdGNoZXMpIHtcbiAgICAgICAgICBpc0RhcmtUaGVtZSA9IGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlzRGFya1RoZW1lID0gd2luZG93LndjLmlzU2l0ZVRoZW1lRGFyaztcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICB9XG4gICAgaWYgKGlzRGFya1RoZW1lICYmICFib2R5LmNsYXNzTGlzdC5jb250YWlucyhcImRhcmtcIikpIHtcbiAgICAgIGNvbnNvbGUuZGVidWcoXCJBcHBseWluZyBIdWdvIEJsb3ggQnVpbGRlciBkYXJrIHRoZW1lXCIpO1xuICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKFwiZGFya1wiKTtcbiAgICB9IGVsc2UgaWYgKCFpc0RhcmtUaGVtZSAmJiBib2R5LmNsYXNzTGlzdC5jb250YWlucyhcImRhcmtcIikpIHtcbiAgICAgIGNvbnNvbGUuZGVidWcoXCJBcHBseWluZyBIdWdvIEJsb3ggQnVpbGRlciBsaWdodCB0aGVtZVwiKTtcbiAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZShcImRhcmtcIik7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBpc0RhcmtUaGVtZSxcbiAgICAgIHRoZW1lTW9kZTogY3VycmVudFRoZW1lTW9kZVxuICAgIH07XG4gIH1cbiAgZnVuY3Rpb24gY2hhbmdlVGhlbWVNb2RlQ2xpY2sobmV3TW9kZSkge1xuICAgIGlmICghY2FuQ2hhbmdlVGhlbWUoKSkge1xuICAgICAgY29uc29sZS5kZWJ1ZyhcIkNhbm5vdCBjaGFuZ2UgdGhlbWUgLSB1c2VyIHRoZW1pbmcgZGlzYWJsZWQuXCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgaXNEYXJrVGhlbWU7XG4gICAgc3dpdGNoIChuZXdNb2RlKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFwid2NUaGVtZVwiLCBcIjBcIik7XG4gICAgICAgIGlzRGFya1RoZW1lID0gZmFsc2U7XG4gICAgICAgIGNvbnNvbGUuZGVidWcoXCJVc2VyIGNoYW5nZWQgdGhlbWUgdmFyaWF0aW9uIHRvIExpZ2h0LlwiKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFwid2NUaGVtZVwiLCBcIjFcIik7XG4gICAgICAgIGlzRGFya1RoZW1lID0gdHJ1ZTtcbiAgICAgICAgY29uc29sZS5kZWJ1ZyhcIlVzZXIgY2hhbmdlZCB0aGVtZSB2YXJpYXRpb24gdG8gRGFyay5cIik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJ3Y1RoZW1lXCIsIFwiMlwiKTtcbiAgICAgICAgaWYgKHdpbmRvdy5tYXRjaE1lZGlhKFwiKHByZWZlcnMtY29sb3Itc2NoZW1lOiBkYXJrKVwiKS5tYXRjaGVzKSB7XG4gICAgICAgICAgaXNEYXJrVGhlbWUgPSB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKHdpbmRvdy5tYXRjaE1lZGlhKFwiKHByZWZlcnMtY29sb3Itc2NoZW1lOiBsaWdodClcIikubWF0Y2hlcykge1xuICAgICAgICAgIGlzRGFya1RoZW1lID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXNEYXJrVGhlbWUgPSB3aW5kb3cud2MuaXNTaXRlVGhlbWVEYXJrO1xuICAgICAgICB9XG4gICAgICAgIGNvbnNvbGUuZGVidWcoXCJVc2VyIGNoYW5nZWQgdGhlbWUgdmFyaWF0aW9uIHRvIEF1dG8uXCIpO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gICAgcmVuZGVyVGhlbWVWYXJpYXRpb24oaXNEYXJrVGhlbWUsIG5ld01vZGUpO1xuICB9XG4gIGZ1bmN0aW9uIHNob3dBY3RpdmVUaGVtZShtb2RlKSB7XG4gICAgbGV0IGxpbmtMaWdodDIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmpzLXNldC10aGVtZS1saWdodFwiKTtcbiAgICBsZXQgbGlua0RhcmsyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5qcy1zZXQtdGhlbWUtZGFya1wiKTtcbiAgICBsZXQgbGlua0F1dG8yID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5qcy1zZXQtdGhlbWUtYXV0b1wiKTtcbiAgICBpZiAobGlua0xpZ2h0MiA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzd2l0Y2ggKG1vZGUpIHtcbiAgICAgIGNhc2UgMDpcbiAgICAgICAgbGlua0xpZ2h0Mi5jbGFzc0xpc3QuYWRkKFwiZHJvcGRvd24taXRlbS1hY3RpdmVcIik7XG4gICAgICAgIGxpbmtEYXJrMi5jbGFzc0xpc3QucmVtb3ZlKFwiZHJvcGRvd24taXRlbS1hY3RpdmVcIik7XG4gICAgICAgIGxpbmtBdXRvMi5jbGFzc0xpc3QucmVtb3ZlKFwiZHJvcGRvd24taXRlbS1hY3RpdmVcIik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAxOlxuICAgICAgICBsaW5rTGlnaHQyLmNsYXNzTGlzdC5yZW1vdmUoXCJkcm9wZG93bi1pdGVtLWFjdGl2ZVwiKTtcbiAgICAgICAgbGlua0RhcmsyLmNsYXNzTGlzdC5hZGQoXCJkcm9wZG93bi1pdGVtLWFjdGl2ZVwiKTtcbiAgICAgICAgbGlua0F1dG8yLmNsYXNzTGlzdC5yZW1vdmUoXCJkcm9wZG93bi1pdGVtLWFjdGl2ZVwiKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBsaW5rTGlnaHQyLmNsYXNzTGlzdC5yZW1vdmUoXCJkcm9wZG93bi1pdGVtLWFjdGl2ZVwiKTtcbiAgICAgICAgbGlua0RhcmsyLmNsYXNzTGlzdC5yZW1vdmUoXCJkcm9wZG93bi1pdGVtLWFjdGl2ZVwiKTtcbiAgICAgICAgbGlua0F1dG8yLmNsYXNzTGlzdC5hZGQoXCJkcm9wZG93bi1pdGVtLWFjdGl2ZVwiKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIHJlbmRlclRoZW1lVmFyaWF0aW9uKGlzRGFya1RoZW1lLCB0aGVtZU1vZGUgPSAyLCBpbml0ID0gZmFsc2UpIHtcbiAgICBjb25zdCBjb2RlSGxMaWdodCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJsaW5rW3RpdGxlPWhsLWxpZ2h0XVwiKTtcbiAgICBjb25zdCBjb2RlSGxEYXJrID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImxpbmtbdGl0bGU9aGwtZGFya11cIik7XG4gICAgY29uc3QgY29kZUhsRW5hYmxlZCA9IGNvZGVIbExpZ2h0ICE9PSBudWxsIHx8IGNvZGVIbERhcmsgIT09IG51bGw7XG4gICAgY29uc3QgZGlhZ3JhbUVuYWJsZWQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwic2NyaXB0W3RpdGxlPW1lcm1haWRdXCIpICE9PSBudWxsO1xuICAgIHNob3dBY3RpdmVUaGVtZSh0aGVtZU1vZGUpO1xuICAgIGNvbnN0IHRoZW1lQ2hhbmdlRXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQoXCJ3Y1RoZW1lQ2hhbmdlXCIsIHsgZGV0YWlsOiB7IGlzRGFya1RoZW1lOiAoKSA9PiBpc0RhcmtUaGVtZSB9IH0pO1xuICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQodGhlbWVDaGFuZ2VFdmVudCk7XG4gICAgaWYgKCFpbml0KSB7XG4gICAgICBpZiAoaXNEYXJrVGhlbWUgPT09IGZhbHNlICYmICFib2R5LmNsYXNzTGlzdC5jb250YWlucyhcImRhcmtcIikgfHwgaXNEYXJrVGhlbWUgPT09IHRydWUgJiYgYm9keS5jbGFzc0xpc3QuY29udGFpbnMoXCJkYXJrXCIpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzRGFya1RoZW1lID09PSBmYWxzZSkge1xuICAgICAgaWYgKCFpbml0KSB7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oZG9jdW1lbnQuYm9keS5zdHlsZSwgeyBvcGFjaXR5OiAwLCB2aXNpYmlsaXR5OiBcInZpc2libGVcIiB9KTtcbiAgICAgICAgZmFkZUluKGRvY3VtZW50LmJvZHksIDYwMCk7XG4gICAgICB9XG4gICAgICBib2R5LmNsYXNzTGlzdC5yZW1vdmUoXCJkYXJrXCIpO1xuICAgICAgaWYgKGNvZGVIbEVuYWJsZWQpIHtcbiAgICAgICAgY29uc29sZS5kZWJ1ZyhcIlNldHRpbmcgSExKUyB0aGVtZSB0byBsaWdodFwiKTtcbiAgICAgICAgaWYgKGNvZGVIbExpZ2h0KSB7XG4gICAgICAgICAgY29kZUhsTGlnaHQuZGlzYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29kZUhsRGFyaykge1xuICAgICAgICAgIGNvZGVIbERhcmsuZGlzYWJsZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZGlhZ3JhbUVuYWJsZWQpIHtcbiAgICAgICAgY29uc29sZS5kZWJ1ZyhcIkluaXRpYWxpemluZyBNZXJtYWlkIHdpdGggbGlnaHQgdGhlbWVcIik7XG4gICAgICAgIGlmIChpbml0KSB7XG4gICAgICAgICAgd2luZG93Lm1lcm1haWQuaW5pdGlhbGl6ZSh7IHN0YXJ0T25Mb2FkOiB0cnVlLCB0aGVtZTogXCJkZWZhdWx0XCIsIHNlY3VyaXR5TGV2ZWw6IFwibG9vc2VcIiB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsb2NhdGlvbi5yZWxvYWQoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNEYXJrVGhlbWUgPT09IHRydWUpIHtcbiAgICAgIGlmICghaW5pdCkge1xuICAgICAgICBPYmplY3QuYXNzaWduKGRvY3VtZW50LmJvZHkuc3R5bGUsIHsgb3BhY2l0eTogMCwgdmlzaWJpbGl0eTogXCJ2aXNpYmxlXCIgfSk7XG4gICAgICAgIGZhZGVJbihkb2N1bWVudC5ib2R5LCA2MDApO1xuICAgICAgfVxuICAgICAgYm9keS5jbGFzc0xpc3QuYWRkKFwiZGFya1wiKTtcbiAgICAgIGlmIChjb2RlSGxFbmFibGVkKSB7XG4gICAgICAgIGNvbnNvbGUuZGVidWcoXCJTZXR0aW5nIEhMSlMgdGhlbWUgdG8gZGFya1wiKTtcbiAgICAgICAgaWYgKGNvZGVIbExpZ2h0KSB7XG4gICAgICAgICAgY29kZUhsTGlnaHQuZGlzYWJsZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb2RlSGxEYXJrKSB7XG4gICAgICAgICAgY29kZUhsRGFyay5kaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZGlhZ3JhbUVuYWJsZWQpIHtcbiAgICAgICAgY29uc29sZS5kZWJ1ZyhcIkluaXRpYWxpemluZyBNZXJtYWlkIHdpdGggZGFyayB0aGVtZVwiKTtcbiAgICAgICAgaWYgKGluaXQpIHtcbiAgICAgICAgICB3aW5kb3cubWVybWFpZC5pbml0aWFsaXplKHsgc3RhcnRPbkxvYWQ6IHRydWUsIHRoZW1lOiBcImRhcmtcIiwgc2VjdXJpdHlMZXZlbDogXCJsb29zZVwiIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxvY2F0aW9uLnJlbG9hZCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIG9uTWVkaWFRdWVyeUxpc3RFdmVudChldmVudCkge1xuICAgIGlmICghY2FuQ2hhbmdlVGhlbWUoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBkYXJrTW9kZU9uID0gZXZlbnQubWF0Y2hlcztcbiAgICBjb25zb2xlLmRlYnVnKGBPUyBkYXJrIG1vZGUgcHJlZmVyZW5jZSBjaGFuZ2VkIHRvICR7ZGFya01vZGVPbiA/IFwiXFx1ezFGMzEyfSBvblwiIDogXCJcXHUyNjAwXFx1RkUwRiBvZmZcIn0uYCk7XG4gICAgbGV0IGN1cnJlbnRUaGVtZVZhcmlhdGlvbiA9IGdldFRoZW1lTW9kZSgpO1xuICAgIGxldCBpc0RhcmtUaGVtZTtcbiAgICBpZiAoY3VycmVudFRoZW1lVmFyaWF0aW9uID09PSAyKSB7XG4gICAgICBpZiAod2luZG93Lm1hdGNoTWVkaWEoXCIocHJlZmVycy1jb2xvci1zY2hlbWU6IGRhcmspXCIpLm1hdGNoZXMpIHtcbiAgICAgICAgaXNEYXJrVGhlbWUgPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmICh3aW5kb3cubWF0Y2hNZWRpYShcIihwcmVmZXJzLWNvbG9yLXNjaGVtZTogbGlnaHQpXCIpLm1hdGNoZXMpIHtcbiAgICAgICAgaXNEYXJrVGhlbWUgPSBmYWxzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlzRGFya1RoZW1lID0gd2luZG93LndjLmlzU2l0ZVRoZW1lRGFyaztcbiAgICAgIH1cbiAgICAgIHJlbmRlclRoZW1lVmFyaWF0aW9uKGlzRGFya1RoZW1lLCBjdXJyZW50VGhlbWVWYXJpYXRpb24pO1xuICAgIH1cbiAgfVxuXG4gIC8vIDxzdGRpbj5cbiAgY29uc29sZS5kZWJ1ZyhgRW52aXJvbm1lbnQ6ICR7aHVnb0Vudmlyb25tZW50fWApO1xuICBmdW5jdGlvbiByZW1vdmVRdWVyeVBhcmFtc0Zyb21VcmwoKSB7XG4gICAgaWYgKHdpbmRvdy5oaXN0b3J5LnJlcGxhY2VTdGF0ZSkge1xuICAgICAgbGV0IHVybFdpdGhvdXRTZWFyY2hQYXJhbXMgPSB3aW5kb3cubG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKyB3aW5kb3cubG9jYXRpb24uaG9zdCArIHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSArIHdpbmRvdy5sb2NhdGlvbi5oYXNoO1xuICAgICAgd2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlKHsgcGF0aDogdXJsV2l0aG91dFNlYXJjaFBhcmFtcyB9LCBcIlwiLCB1cmxXaXRob3V0U2VhcmNoUGFyYW1zKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gdG9nZ2xlU2VhcmNoRGlhbG9nKCkge1xuICAgIGNvbnN0IGJvZHkyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImJvZHlcIik7XG4gICAgaWYgKGJvZHkyLmNsYXNzTGlzdC5jb250YWlucyhcInNlYXJjaGluZ1wiKSkge1xuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzZWFyY2gtcXVlcnlcIikuYmx1cigpO1xuICAgICAgYm9keTIuY2xhc3NMaXN0LnJlbW92ZShcInNlYXJjaGluZ1wiLCBcImNvbXBlbnNhdGUtZm9yLXNjcm9sbGJhclwiKTtcbiAgICAgIHJlbW92ZVF1ZXJ5UGFyYW1zRnJvbVVybCgpO1xuICAgICAgJChcIiNmYW5jeWJveC1zdHlsZS1ub3Njcm9sbFwiKS5yZW1vdmUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCEkKFwiI2ZhbmN5Ym94LXN0eWxlLW5vc2Nyb2xsXCIpLmxlbmd0aCAmJiBkb2N1bWVudC5ib2R5LnNjcm9sbEhlaWdodCA+IHdpbmRvdy5pbm5lckhlaWdodCkge1xuICAgICAgICAkKFwiaGVhZFwiKS5hcHBlbmQoXG4gICAgICAgICAgJzxzdHlsZSBpZD1cImZhbmN5Ym94LXN0eWxlLW5vc2Nyb2xsXCI+LmNvbXBlbnNhdGUtZm9yLXNjcm9sbGJhcnttYXJnaW4tcmlnaHQ6JyArICh3aW5kb3cuaW5uZXJXaWR0aCAtIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCkgKyBcInB4O308L3N0eWxlPlwiXG4gICAgICAgICk7XG4gICAgICAgIGJvZHkyLmNsYXNzTGlzdC5hZGQoXCJjb21wZW5zYXRlLWZvci1zY3JvbGxiYXJcIik7XG4gICAgICB9XG4gICAgICBib2R5Mi5jbGFzc0xpc3QuYWRkKFwic2VhcmNoaW5nXCIpO1xuICAgICAgJChcIi5zZWFyY2gtcmVzdWx0c1wiKS5jc3MoeyBvcGFjaXR5OiAwLCB2aXNpYmlsaXR5OiBcInZpc2libGVcIiB9KS5hbmltYXRlKHsgb3BhY2l0eTogMSB9LCAyMDApO1xuICAgICAgbGV0IGFsZ29saWFTZWFyY2hCb3ggPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmFpcy1TZWFyY2hCb3gtaW5wdXRcIik7XG4gICAgICBpZiAoYWxnb2xpYVNlYXJjaEJveCkge1xuICAgICAgICBhbGdvbGlhU2VhcmNoQm94LmZvY3VzKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInNlYXJjaC1xdWVyeVwiKS5mb2N1cygpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBmaXhIdWdvT3V0cHV0KCkge1xuICAgIGlmIChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI1RhYmxlT2ZDb250ZW50c1wiKSkge1xuICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNUYWJsZU9mQ29udGVudHNcIikuY2xhc3NMaXN0LmFkZChcIm5hdlwiLCBcImZsZXgtY29sdW1uXCIpO1xuICAgIH1cbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiI1RhYmxlT2ZDb250ZW50cyBsaVwiKS5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICBpdGVtLmNsYXNzTGlzdC5hZGQoXCJuYXYtaXRlbVwiKTtcbiAgICB9KTtcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiI1RhYmxlT2ZDb250ZW50cyBsaSBhXCIpLmZvckVhY2goKGxpbmspID0+IHtcbiAgICAgIGxpbmsuY2xhc3NMaXN0LmFkZChcIm5hdi1saW5rXCIpO1xuICAgIH0pO1xuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFt0eXBlPSdjaGVja2JveCddW2Rpc2FibGVkXVwiKS5mb3JFYWNoKChjaGVja2JveCkgPT4ge1xuICAgICAgY2hlY2tib3guY2xvc2VzdChcInVsXCIpLmNsYXNzTGlzdC5hZGQoXCJ0YXNrLWxpc3RcIik7XG4gICAgfSk7XG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcInRhYmxlXCIpLmZvckVhY2goKHRhYmxlKSA9PiB7XG4gICAgICB0YWJsZS5jbGFzc0xpc3QuYWRkKFwidGFibGVcIik7XG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gZ2V0U2libGluZ3MoZWxlbSkge1xuICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuZmlsdGVyLmNhbGwoZWxlbS5wYXJlbnROb2RlLmNoaWxkcmVuLCBmdW5jdGlvbihzaWJsaW5nKSB7XG4gICAgICByZXR1cm4gc2libGluZyAhPT0gZWxlbTtcbiAgICB9KTtcbiAgfVxuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCBmdW5jdGlvbigpIHtcbiAgICBmaXhIdWdvT3V0cHV0KCk7XG4gICAgbGV0IHsgaXNEYXJrVGhlbWUsIHRoZW1lTW9kZSB9ID0gaW5pdFRoZW1lVmFyaWF0aW9uKCk7XG4gICAgcmVuZGVyVGhlbWVWYXJpYXRpb24oaXNEYXJrVGhlbWUsIHRoZW1lTW9kZSwgdHJ1ZSk7XG4gICAgbGV0IGNoaWxkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5kb2NzLWxpbmtzIC5hY3RpdmVcIik7XG4gICAgbGV0IHBhcmVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZG9jcy1saW5rc1wiKTtcbiAgICBpZiAoY2hpbGQgJiYgcGFyZW50KSB7XG4gICAgICBzY3JvbGxQYXJlbnRUb0NoaWxkKHBhcmVudCwgY2hpbGQpO1xuICAgIH1cbiAgICBsZXQgZ2l0aHViUmVsZWFzZVNlbGVjdG9yID0gXCIuanMtZ2l0aHViLXJlbGVhc2VcIjtcbiAgICBpZiAoJChnaXRodWJSZWxlYXNlU2VsZWN0b3IpLmxlbmd0aCA+IDApIHtcbiAgICAgIHByaW50TGF0ZXN0UmVsZWFzZShnaXRodWJSZWxlYXNlU2VsZWN0b3IsICQoZ2l0aHViUmVsZWFzZVNlbGVjdG9yKS5kYXRhKFwicmVwb1wiKSk7XG4gICAgfVxuICB9KTtcbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIGZ1bmN0aW9uKCkge1xuICAgIGZpeFNjcm9sbHNweSgpO1xuICAgIGxldCBpc290b3BlSW5zdGFuY2VzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5wcm9qZWN0cy1jb250YWluZXJcIik7XG4gICAgbGV0IGlzb3RvcGVJbnN0YW5jZXNDb3VudCA9IGlzb3RvcGVJbnN0YW5jZXMubGVuZ3RoO1xuICAgIGlmICh3aW5kb3cubG9jYXRpb24uaGFzaCAmJiBpc290b3BlSW5zdGFuY2VzQ291bnQgPT09IDApIHtcbiAgICAgIHNjcm9sbFRvQW5jaG9yKGRlY29kZVVSSUNvbXBvbmVudCh3aW5kb3cubG9jYXRpb24uaGFzaCksIDApO1xuICAgIH1cbiAgICBsZXQgY2hpbGQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmRvY3MtdG9jIC5uYXYtbGluay5hY3RpdmVcIik7XG4gICAgbGV0IHBhcmVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZG9jcy10b2NcIik7XG4gICAgaWYgKGNoaWxkICYmIHBhcmVudCkge1xuICAgICAgc2Nyb2xsUGFyZW50VG9DaGlsZChwYXJlbnQsIGNoaWxkKTtcbiAgICB9XG4gICAgbGV0IHpvb21PcHRpb25zID0ge307XG4gICAgaWYgKGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmNvbnRhaW5zKFwiZGFya1wiKSkge1xuICAgICAgem9vbU9wdGlvbnMuYmFja2dyb3VuZCA9IFwicmdiYSgwLDAsMCwwLjkpXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHpvb21PcHRpb25zLmJhY2tncm91bmQgPSBcInJnYmEoMjU1LDI1NSwyNTUsMC45KVwiO1xuICAgIH1cbiAgICBtZWRpdW1fem9vbV9lc21fZGVmYXVsdChcIltkYXRhLXpvb21hYmxlXVwiLCB6b29tT3B0aW9ucyk7XG4gICAgbGV0IGlzb3RvcGVDb3VudGVyID0gMDtcbiAgICBpc290b3BlSW5zdGFuY2VzLmZvckVhY2goZnVuY3Rpb24oaXNvdG9wZUluc3RhbmNlLCBpbmRleCkge1xuICAgICAgY29uc29sZS5kZWJ1ZyhgTG9hZGluZyBJc290b3BlIGluc3RhbmNlICR7aW5kZXh9YCk7XG4gICAgICBsZXQgaXNvO1xuICAgICAgbGV0IGlzb1NlY3Rpb24gPSBpc290b3BlSW5zdGFuY2UuY2xvc2VzdChcInNlY3Rpb25cIik7XG4gICAgICBsZXQgbGF5b3V0ID0gXCJcIjtcbiAgICAgIGlmIChpc29TZWN0aW9uLnF1ZXJ5U2VsZWN0b3IoXCIuaXNvdG9wZVwiKS5jbGFzc0xpc3QuY29udGFpbnMoXCJqcy1sYXlvdXQtcm93XCIpKSB7XG4gICAgICAgIGxheW91dCA9IFwiZml0Um93c1wiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGF5b3V0ID0gXCJtYXNvbnJ5XCI7XG4gICAgICB9XG4gICAgICBsZXQgZGVmYXVsdEZpbHRlciA9IGlzb1NlY3Rpb24ucXVlcnlTZWxlY3RvcihcIi5kZWZhdWx0LXByb2plY3QtZmlsdGVyXCIpO1xuICAgICAgbGV0IGZpbHRlclRleHQgPSBcIipcIjtcbiAgICAgIGlmIChkZWZhdWx0RmlsdGVyICE9PSBudWxsKSB7XG4gICAgICAgIGZpbHRlclRleHQgPSBkZWZhdWx0RmlsdGVyLnRleHRDb250ZW50O1xuICAgICAgfVxuICAgICAgY29uc29sZS5kZWJ1ZyhgRGVmYXVsdCBJc290b3BlIGZpbHRlcjogJHtmaWx0ZXJUZXh0fWApO1xuICAgICAgaW1hZ2VzTG9hZGVkKGlzb3RvcGVJbnN0YW5jZSwgZnVuY3Rpb24oKSB7XG4gICAgICAgIGlzbyA9IG5ldyBJc290b3BlKGlzb3RvcGVJbnN0YW5jZSwge1xuICAgICAgICAgIGl0ZW1TZWxlY3RvcjogXCIuaXNvdG9wZS1pdGVtXCIsXG4gICAgICAgICAgbGF5b3V0TW9kZTogbGF5b3V0LFxuICAgICAgICAgIG1hc29ucnk6IHtcbiAgICAgICAgICAgIGd1dHRlcjogMjBcbiAgICAgICAgICB9LFxuICAgICAgICAgIGZpbHRlcjogZmlsdGVyVGV4dFxuICAgICAgICB9KTtcbiAgICAgICAgbGV0IGlzb0ZpbHRlckJ1dHRvbnMgPSBpc29TZWN0aW9uLnF1ZXJ5U2VsZWN0b3JBbGwoXCIucHJvamVjdC1maWx0ZXJzIGFcIik7XG4gICAgICAgIGlzb0ZpbHRlckJ1dHRvbnMuZm9yRWFjaChcbiAgICAgICAgICAoYnV0dG9uKSA9PiBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChlKSA9PiB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBsZXQgc2VsZWN0b3IgPSBidXR0b24uZ2V0QXR0cmlidXRlKFwiZGF0YS1maWx0ZXJcIik7XG4gICAgICAgICAgICBjb25zb2xlLmRlYnVnKGBVcGRhdGluZyBJc290b3BlIGZpbHRlciB0byAke3NlbGVjdG9yfWApO1xuICAgICAgICAgICAgaXNvLmFycmFuZ2UoeyBmaWx0ZXI6IHNlbGVjdG9yIH0pO1xuICAgICAgICAgICAgYnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoXCJhY3RpdmVcIik7XG4gICAgICAgICAgICBidXR0b24uY2xhc3NMaXN0LmFkZChcImFjdGl2ZVwiKTtcbiAgICAgICAgICAgIGxldCBidXR0b25TaWJsaW5ncyA9IGdldFNpYmxpbmdzKGJ1dHRvbik7XG4gICAgICAgICAgICBidXR0b25TaWJsaW5ncy5mb3JFYWNoKChidXR0b25TaWJsaW5nKSA9PiB7XG4gICAgICAgICAgICAgIGJ1dHRvblNpYmxpbmcuY2xhc3NMaXN0LnJlbW92ZShcImFjdGl2ZVwiKTtcbiAgICAgICAgICAgICAgYnV0dG9uU2libGluZy5jbGFzc0xpc3QucmVtb3ZlKFwiYWxsXCIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICAgICAgaW5jcmVtZW50SXNvdG9wZUNvdW50ZXIoKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGZ1bmN0aW9uIGluY3JlbWVudElzb3RvcGVDb3VudGVyKCkge1xuICAgICAgaXNvdG9wZUNvdW50ZXIrKztcbiAgICAgIGlmIChpc290b3BlQ291bnRlciA9PT0gaXNvdG9wZUluc3RhbmNlc0NvdW50KSB7XG4gICAgICAgIGNvbnNvbGUuZGVidWcoYEFsbCBQb3J0Zm9saW8gSXNvdG9wZSBpbnN0YW5jZXMgbG9hZGVkLmApO1xuICAgICAgICBpZiAod2luZG93LmxvY2F0aW9uLmhhc2gpIHtcbiAgICAgICAgICBzY3JvbGxUb0FuY2hvcihkZWNvZGVVUklDb21wb25lbnQod2luZG93LmxvY2F0aW9uLmhhc2gpLCAwKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5dXBcIiwgKGV2ZW50KSA9PiB7XG4gICAgICBpZiAoZXZlbnQuY29kZSA9PT0gXCJFc2NhcGVcIikge1xuICAgICAgICBjb25zdCBib2R5MiA9IGRvY3VtZW50LmJvZHk7XG4gICAgICAgIGlmIChib2R5Mi5jbGFzc0xpc3QuY29udGFpbnMoXCJzZWFyY2hpbmdcIikpIHtcbiAgICAgICAgICB0b2dnbGVTZWFyY2hEaWFsb2coKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGV2ZW50LmtleSA9PT0gXCIvXCIpIHtcbiAgICAgICAgbGV0IGZvY3VzZWRFbGVtZW50ID0gZG9jdW1lbnQuaGFzRm9jdXMoKSAmJiBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICE9PSBkb2N1bWVudC5ib2R5ICYmIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgIT09IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCAmJiBkb2N1bWVudC5hY3RpdmVFbGVtZW50IHx8IG51bGw7XG4gICAgICAgIGxldCBpc0lucHV0Rm9jdXNlZCA9IGZvY3VzZWRFbGVtZW50IGluc3RhbmNlb2YgSFRNTElucHV0RWxlbWVudCB8fCBmb2N1c2VkRWxlbWVudCBpbnN0YW5jZW9mIEhUTUxUZXh0QXJlYUVsZW1lbnQ7XG4gICAgICAgIGlmIChzZWFyY2hFbmFibGVkICYmICFpc0lucHV0Rm9jdXNlZCkge1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgdG9nZ2xlU2VhcmNoRGlhbG9nKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoc2VhcmNoRW5hYmxlZCkge1xuICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5qcy1zZWFyY2hcIikuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZSkgPT4ge1xuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICB0b2dnbGVTZWFyY2hEaWFsb2coKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgJCgnW2RhdGEtdG9nZ2xlPVwidG9vbHRpcFwiXScpLnRvb2x0aXAoKTtcbiAgfSk7XG4gIHZhciBsaW5rTGlnaHQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmpzLXNldC10aGVtZS1saWdodFwiKTtcbiAgdmFyIGxpbmtEYXJrID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5qcy1zZXQtdGhlbWUtZGFya1wiKTtcbiAgdmFyIGxpbmtBdXRvID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5qcy1zZXQtdGhlbWUtYXV0b1wiKTtcbiAgaWYgKGxpbmtMaWdodCAmJiBsaW5rRGFyayAmJiBsaW5rQXV0bykge1xuICAgIGxpbmtMaWdodC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGV2ZW50KSA9PiB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgY2hhbmdlVGhlbWVNb2RlQ2xpY2soMCk7XG4gICAgfSk7XG4gICAgbGlua0RhcmsuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChldmVudCkgPT4ge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGNoYW5nZVRoZW1lTW9kZUNsaWNrKDEpO1xuICAgIH0pO1xuICAgIGxpbmtBdXRvLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZXZlbnQpID0+IHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBjaGFuZ2VUaGVtZU1vZGVDbGljaygyKTtcbiAgICB9KTtcbiAgfVxuICB2YXIgZGFya01vZGVNZWRpYVF1ZXJ5ID0gd2luZG93Lm1hdGNoTWVkaWEoXCIocHJlZmVycy1jb2xvci1zY2hlbWU6IGRhcmspXCIpO1xuICBkYXJrTW9kZU1lZGlhUXVlcnkuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCAoZXZlbnQpID0+IHtcbiAgICBvbk1lZGlhUXVlcnlMaXN0RXZlbnQoZXZlbnQpO1xuICB9KTtcbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcInByZSA+IGNvZGVcIikuZm9yRWFjaCgoY29kZWJsb2NrKSA9PiB7XG4gICAgY29uc3QgY29udGFpbmVyID0gY29kZWJsb2NrLnBhcmVudE5vZGUucGFyZW50Tm9kZTtcbiAgICBjb25zdCBjb3B5QnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtcbiAgICBsZXQgY2xhc3Nlc1RvQWRkID0gW1wiYnRuXCIsIFwiYnRuLXByaW1hcnlcIiwgXCJidG4tY29weS1jb2RlXCJdO1xuICAgIGNvcHlCdG4uY2xhc3NMaXN0LmFkZCguLi5jbGFzc2VzVG9BZGQpO1xuICAgIGNvcHlCdG4uaW5uZXJIVE1MID0gaTE4bltcImNvcHlcIl07XG4gICAgZnVuY3Rpb24gY29waWVkTm90aWZpY2F0aW9uKCkge1xuICAgICAgY29weUJ0bi5pbm5lckhUTUwgPSBpMThuW1wiY29waWVkXCJdO1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGNvcHlCdG4uaW5uZXJIVE1MID0gaTE4bltcImNvcHlcIl07XG4gICAgICB9LCAyZTMpO1xuICAgIH1cbiAgICBjb3B5QnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICBjb25zb2xlLmRlYnVnKFwiQ29kZSBibG9jayBjb3B5IGNsaWNrLiBJcyBzZWN1cmUgY29udGV4dCBmb3IgQ2xpcGJvYXJkIEFQST8gXCIgKyB3aW5kb3cuaXNTZWN1cmVDb250ZXh0KTtcbiAgICAgIGlmIChcImNsaXBib2FyZFwiIGluIG5hdmlnYXRvcikge1xuICAgICAgICBuYXZpZ2F0b3IuY2xpcGJvYXJkLndyaXRlVGV4dChjb2RlYmxvY2sudGV4dENvbnRlbnQpO1xuICAgICAgICBjb3BpZWROb3RpZmljYXRpb24oKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS5kZWJ1ZyhcIkZhbGxpbmcgYmFjayB0byBsZWdhY3kgY2xpcGJvYXJkIGNvcHlcIik7XG4gICAgICAgIGNvbnN0IHJhbmdlID0gZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcbiAgICAgICAgcmFuZ2Uuc2VsZWN0Tm9kZUNvbnRlbnRzKGNvZGVibG9jayk7XG4gICAgICAgIGNvbnN0IHNlbGVjdGlvbiA9IHdpbmRvdy5nZXRTZWxlY3Rpb24oKTtcbiAgICAgICAgc2VsZWN0aW9uLnJlbW92ZUFsbFJhbmdlcygpO1xuICAgICAgICBzZWxlY3Rpb24uYWRkUmFuZ2UocmFuZ2UpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGRvY3VtZW50LmV4ZWNDb21tYW5kKFwiY29weVwiKTtcbiAgICAgICAgICBjb3BpZWROb3RpZmljYXRpb24oKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICAgIH1cbiAgICAgICAgc2VsZWN0aW9uLnJlbW92ZVJhbmdlKHJhbmdlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoY29udGFpbmVyLmNsYXNzTGlzdC5jb250YWlucyhcImhpZ2hsaWdodFwiKSkge1xuICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGNvcHlCdG4pO1xuICAgIH0gZWxzZSBpZiAoY29kZWJsb2NrLnBhcmVudE5vZGUucGFyZW50Tm9kZS5wYXJlbnROb2RlLnBhcmVudE5vZGUucGFyZW50Tm9kZS5ub2RlTmFtZSA9PSBcIlRBQkxFXCIpIHtcbiAgICAgIGNvZGVibG9jay5wYXJlbnROb2RlLnBhcmVudE5vZGUucGFyZW50Tm9kZS5wYXJlbnROb2RlLnBhcmVudE5vZGUuYXBwZW5kQ2hpbGQoY29weUJ0bik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvZGVibG9jay5wYXJlbnROb2RlLmFwcGVuZENoaWxkKGNvcHlCdG4pO1xuICAgIH1cbiAgfSk7XG59KSgpO1xuLyohIG1lZGl1bS16b29tIDEuMC44IHwgTUlUIExpY2Vuc2UgfCBodHRwczovL2dpdGh1Yi5jb20vZnJhbmNvaXNjaGFsaWZvdXIvbWVkaXVtLXpvb20gKi9cbiJdLAogICJtYXBwaW5ncyI6ICI7O0FBQUEsR0FBQyxNQUFNO0FBRUwsUUFBSSxXQUFXLE9BQU8sVUFBVSxTQUFTLFFBQVE7QUFDL0MsZUFBUyxJQUFJLEdBQUcsSUFBSSxVQUFVLFFBQVEsS0FBSztBQUN6QyxZQUFJLFNBQVMsVUFBVSxDQUFDO0FBQ3hCLGlCQUFTLE9BQU8sUUFBUTtBQUN0QixjQUFJLE9BQU8sVUFBVSxlQUFlLEtBQUssUUFBUSxHQUFHLEdBQUc7QUFDckQsbUJBQU8sR0FBRyxJQUFJLE9BQU8sR0FBRztBQUFBLFVBQzFCO0FBQUEsUUFDRjtBQUFBLE1BQ0Y7QUFDQSxhQUFPO0FBQUEsSUFDVDtBQUNBLFFBQUksY0FBYyxTQUFTLGFBQWEsTUFBTTtBQUM1QyxhQUFPLEtBQUssWUFBWTtBQUFBLElBQzFCO0FBQ0EsUUFBSSxhQUFhLFNBQVMsWUFBWSxVQUFVO0FBQzlDLGFBQU8sU0FBUyxVQUFVLGNBQWMsUUFBUTtBQUFBLElBQ2xEO0FBQ0EsUUFBSSxTQUFTLFNBQVMsUUFBUSxVQUFVO0FBQ3RDLGFBQU8sWUFBWSxTQUFTLGFBQWE7QUFBQSxJQUMzQztBQUNBLFFBQUksUUFBUSxTQUFTLE9BQU8sT0FBTztBQUNqQyxVQUFJLFNBQVMsTUFBTSxjQUFjLE1BQU07QUFDdkMsYUFBTyxPQUFPLE9BQU8sRUFBRSxFQUFFLFlBQVksTUFBTTtBQUFBLElBQzdDO0FBQ0EsUUFBSSx3QkFBd0IsU0FBUyx1QkFBdUIsVUFBVTtBQUNwRSxVQUFJO0FBQ0YsWUFBSSxNQUFNLFFB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
